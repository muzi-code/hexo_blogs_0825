{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/JUC-HashMap.md","hash":"da0b01f1d25125cdfd7b38327db8ff919e731b93","modified":1630850397208},{"_id":"source/about/index.md","hash":"a99b5b281dda41eab8d6dfb0564fc409d8155d5b","modified":1629878583799},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"523b9db3801ca892124502c17d72864457cc4b21","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"dac9d10d95b9e179e8cd7c439300b450db51f0c2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"5ca24ecac966e78178166e18d78215a4a5788e1c","modified":1629877873916},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"public/local-search.xml","hash":"d7096d701ba0088da6c2b2a28bbce386091b369d","modified":1630854439234},{"_id":"public/2019/10/10/JUC-HashMap/index.html","hash":"41602feb2d525c7e92b3aa811754f0fbe8b3f82f","modified":1630854439234},{"_id":"public/about/index.html","hash":"e7a6e931042d169929bcd1d3e40536e6dfed8233","modified":1630854439234},{"_id":"public/archives/index.html","hash":"16c2223c61305435366c29d29dcfce9650468d0d","modified":1630854439234},{"_id":"public/archives/2019/index.html","hash":"16c2223c61305435366c29d29dcfce9650468d0d","modified":1630854439234},{"_id":"public/archives/2019/10/index.html","hash":"16c2223c61305435366c29d29dcfce9650468d0d","modified":1630854439234},{"_id":"public/categories/JDK源码分析/index.html","hash":"566dd3bb0b0a205a7952026a0824a5519677ad19","modified":1630854439234},{"_id":"public/tags/容器/index.html","hash":"be1d9cb89f177b791593f1ca4bac7676599dcd8e","modified":1630854439234},{"_id":"public/index.html","hash":"0f7d2b2faca03d146d5a4c54f126cef79fddaf16","modified":1630854439234},{"_id":"public/tags/HashMap/index.html","hash":"cf687c084f72410252f182d41797cca1be4c430a","modified":1630854439234},{"_id":"public/404.html","hash":"3b9b85ae5f811e0185a0dafecca9302c83964466","modified":1630854439234},{"_id":"public/tags/JUC/index.html","hash":"b23f76b6895445f715ad15fcdba93f53187d3b24","modified":1630854439234},{"_id":"public/tags/index.html","hash":"db1db83352265da5fff580e753947fa5a9a255c5","modified":1630854439234},{"_id":"public/categories/index.html","hash":"89896802f4772f4a7e6e76bc893d6bf6549fa99a","modified":1630854439234},{"_id":"public/links/index.html","hash":"2947f804d4cd0f12148817f75e8d9facba5229f3","modified":1630854439234},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1630854439234},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1630854439234},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1630854439234},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1630854439234},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1630854439234},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1630854439234},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1630854439234},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1630854439234},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1630854439234},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1630854439234},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1630854439234},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1630854439234},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1630854439234},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1630854439234},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1630854439234},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1630854439234},{"_id":"public/css/main.css","hash":"27c2f9e6735b32b29560c0177761964f046325f7","modified":1630854439234}],"Category":[{"name":"JDK源码分析","_id":"ckt7cmj6f00020cw048daagvc"}],"Data":[],"Page":[{"title":"about","date":"2021-08-25T08:02:09.000Z","_content":"\n\n# 李福毅\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-25 16:02:09\n---\n\n\n# 李福毅\n","updated":"2021-08-25T08:03:03.799Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckt7cmj6800000cw07faid6k4","content":"<h1 id=\"李福毅\"><a href=\"#李福毅\" class=\"headerlink\" title=\"李福毅\"></a>李福毅</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"李福毅\"><a href=\"#李福毅\" class=\"headerlink\" title=\"李福毅\"></a>李福毅</h1>"}],"Post":[{"title":"HashMap JDK1.8","date":"2019-10-10T00:00:00.000Z","excerpt":"HashMap是我们日常开发过程中频繁使用的工具类，其中包含很多基础的数据结构和算法。故深入理解HashMap的源代码，分析其中一些巧妙地计算设计，可以提高自己对编程的理解。","_content":"\n\n\n# 一、数据结构\n\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84JDK1.8.jpg?raw=true)\n\nHashMap是java的util包中一个高效的查询容器，内部是类似哈希表的数据结构，哈希表以键值对为基础存储和查询数据，它的查询效率是O(1)。\n\n**数据结构**\n- 数组：基于数组下标随机访问，查询速度快。\n- 链表：通过链地址法解决Hash冲突。\n- 红黑树：使用红黑树logn(n指的是链上的数量)级别的查询效率，解决链表过长查询效率低的问题。\n\n## 1. 数组\n**哈希表数组**\n```\ntransient Node<K,V>[] table;\n```\n**描述**\nHashMap实际存储键值数据的是名为talbe的字段，table是Node结点类型的数组。\n\n## 2. 链表\n**哈希表元素的数据结构**\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n        // ... ...\n}\n```\n**描述**\n每一个结点都有一个hash、key、value和next，结点是构成单链表的基础数据结构。\n\n## 3. 红黑树\n**哈希表树结点的数据结构**\n```\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n        TreeNode<K,V> parent;  // red-black tree links\n        TreeNode<K,V> left;\n        TreeNode<K,V> right;\n        TreeNode<K,V> prev;    // needed to unlink next upon deletion\n        boolean red;\n        // ... ...\n}\n```\n\n**描述**\nHashMap在1.8之后引入了红黑树的概念，红黑树是二叉搜索树的一种，常规的二叉搜索树只需要满足结点的值大于做孩子的值小于右孩子的值即可。但是红黑树不仅仅是这样，红黑树需要满足以下的性质。\n\n### 红黑树的性质\n（来自算法导论第三版 p174）\n1. 每个结点或是红色的，或是黑色的。\n2. 根结点是黑色的。\n3. 每个叶结点（NIL）是黑色的。\n4. 如果一个结点是红色的，则它的两个子结点都是黑色的。\n5. 对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点。\n\n### 为什么使用红黑树？\n**二叉搜索树**\n传统的二叉搜索树最坏的情况下树的高度等于结点的数目，以至于查询数据达到了O(n)。\n\n**AVL树**\n平衡二叉树是一种平衡了树高的结构，使得任意一个结点的左右子树高差值不超过1。虽然AVL树可以弥补传统的二叉搜索树的缺点，但是它又引来了新的问题，当数据量大了的时候维护AVL树性质的自旋操作会很影响插入性能。\n\n**红黑树**\n通过红黑节点性质来维护树的结构，通过节点的颜色变换，简单的旋转赋值提高红黑树的插入性能。\n\n红黑树的最长路径不会超过最短路径的两倍，此时全黑10 + 黑10红9，不会超过两倍。**max <= 2\\*min**\n\n**数据结构小结**\n红黑树的是许多“平衡搜索树”中的一种，它是一种似平衡的状态，它可以保证在最坏的情况下基本动态集合的操作时间复杂度为O(logn)。\n\n\n# 二、哈希寻址\n\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80.jpg?raw=true)\n\n**寻址流程**\n1. 使用key执行**hash算法**，用key的hashCode方法返回值当作**扰动函数**的基础数据，并计算最终哈希值。\n2. 根据返回的哈希值与表长减一的值进行**与**运算hash & (n-1)，得到取模的结果。\n3. 把取模的结果当作目标下标进行相应的操作。\n\n**备注**\n表达式[hash & (n-1)] 和 [hash % n] 在表长为2的幂次的情况下，得到的结果是一致的，都可以作为取模操作。\n\n## 1. 哈希算法\n```\n    static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\nhash算法的目的是为了让不同的key哈希的结果更加离散，防止链表过长或红黑树过高。\n上述HashMap的算法是基于键的hashCode返回值，参与到扰动函数的计算中，从而得到具体的哈希结果。这里需要注意当key为null的时候，返回的哈希值为0。\n\n## 2. 扰动函数\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0.jpg?raw=true)\n\n所谓的扰动函数是指，为了使得key尽可能的分散，我们需要使用到key的更多特征，而不仅仅是用其哈希值直接进行取模运算。上述扰动函数使用key哈希值和key哈希值无符号右移16位的值进行异或运算，引入了高16位的特征，增大哈希值的离散性。\n\n## 3. 为什么异或更加分散？\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%BC%82%E6%88%96%E7%9A%84%E4%BB%B7%E5%80%BC.jpg?raw=true)\n\n与操作和或操作对位上0和1的概率是不均衡的，而异或是均衡的。哈希值右移16位，正好是32位的一半，高16位和低16位异或，混合了原始哈希值的高低位的特征，以此来加大低位的随机性。\n\n\n# 三、关键方法\n\n## 1. 保存结点\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E7%9A%84%E4%BF%9D%E5%AD%98%E6%B5%81%E7%A8%8B.png?raw=true)\n\n**put方法会先进行hash，然后调用putVal方法进行实际处理。**\n```\n    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n```\n\n**putVal描述**\n1. 如果当前表为空或长度为0，重新构建一个默认容量的容器。\n2. 如果哈希寻址到的下标的元素为空，创建一个Node放入。\n3. 非以上情况\n   i. 如果当前key等于待插入元素的key，hash值也相同，替换原值。\n   ii. 如果当前结点是treeNode，使用红黑树的putTreeVal方法插入结点。\n   iii. 否则就遍历当前链表依次比较key和hash，如果相同替换原值，不同就继续遍历，直到下一个结点是空的就插入。 插入会判断当前是否是第八个结点，是的话且表长等于64，链表就树化。\n4. 返回该key的原值，若没有则返回为空。\n\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            // 哈希表为空初始化\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            // 索引位置为空，放入当前结点\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                // 键相同值替换，后面判断替换值\n                e = p;\n            else if (p instanceof TreeNode)\n                // 树结点，使用红黑树的插入方法\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                // 遍历链表\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    // 相同的键则跳出循环，判断替换原值\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            // 替换原值\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n```\n\n\n## 2. 查询结点\n\n**get方法会先hash然后getNode寻找值**\n\n```\n    public V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n```\n\n**getNode描述**\n1. 根据hash与运算求得数组下标位置，并判断是否有值。\n2. 有值的话，则判断查询的key，是否等于first结点的key，等于则返回。\n3. 头结点不等于的话，判断是否是红黑树的结点，是红黑树的结点就走红黑树的查询逻辑。\n4. 不是红黑树的结点就遍历单链表查询。\n\n```\n    final Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            \n            // 找hash值对应到数组中的元素下标，判断下标位置是否为空\n            (first = tab[(n - 1) & hash]) != null) {\n            \n            // 判断头结点\n            if (first.hash == hash && \n                ((k = first.key) == key || (key != null && key.equals(k))))\n                return first;\n            if ((e = first.next) != null) {\n            \n            // 判断是否是树结点\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                    \n                // 遍历单链表\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n\n```\n\n## 3. 哈希表扩容\nHashMap 的扩容在 put 操作中会触发扩容，主要是这个方法:\n```\nfinal Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        // ... ...\n \t\t// 定义新哈希表\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) {\n        \t// 老哈希表内容复制到新的哈希表\n            for (int j = 0; j < oldCap; ++j) {\n                if ((e = oldTab[j]) != null) {\n                        // ... ...\n                    else {\n                    \t// 当前链表拆成两个链表，原位置表loHead，新位置表hiHead。\n                        Node<K,V> loHead = null, loTail = null;\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                            next = e.next;\n                            if ((e.hash & oldCap) == 0) {\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        // 原位置表lohead设置到新表的原位置上。\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        // 新位置表hihead设置到新表的原位置+原表长的位置上。\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n\t\t// ... ...\n    }\n```\n\nHashMap一次扩容的过程:\n1、取当前table的2倍作为新table的大小。\n2、根据算出的新table的大小new出一个新的Entry数组来，名为newTab。\n3、HashMap中的table指向newTable。\n3、轮询原table的每一个位置，将每个位置上连接的Entry，算出在新table上的位置，并以链表形式连接。原table上的所有Entry全部轮询完毕之后，意味着原table上面的所有Entry已经移到了新的table上。\n\n### 扩容案例\n\n扩容前：\n\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%89%8D.jpg?raw=true)\n\n扩容后：\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%90%8E.jpg?raw=true)\n\n### 扩容后数组的定位\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%A9%E5%AE%B9%E5%89%8D%E5%90%8E%E4%BD%8D%E7%BD%AE%E8%A7%84%E5%88%99.png?raw=true)\n\n如图可知，扩容前的Hash值[A - F]都在同一个链表上，扩容后则链表就会拆开[ABC]在4位置，[DEF]在20位置。扩容后原来的链表元素仅可能出现在两个位置，如果链表元素原来在 x 位置上，那么扩容后的两个点位就是 x 和 x + 16的位置上。\n\n故上图原来都在一个链表上，那么扩容就是4和20两个位置。\n\n\n## 4. put和putIfAbsent区别\n\n**put方法onlyIfAbsent传的是false**\n```\n    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n    \n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict)\n\n```\n**putIfAbsent方法onlyIfAbsent传的是true**\n```\n    public V putIfAbsent(K key, V value) {\n        return putVal(hash(key), key, value, true, true);\n    }\n```\n**putVal的onlyIfAbsent参数是干嘛的**\n```\n            // 键相同替换原值的逻辑\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                // 如果onlyIfAbsent是false则是替换原值的\n                // onlyIfAbsent是true则是不会替换原值的\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n\n```\n\n### putIfAbsent小结\nonlyIfAbsent参数为false，则新值会替换原值并且返回原值。\nonlyIfAbsent参数为true，则原值不变并且返回原值。\n\n# 四、其他\n\n## 1. 澄清HashMap链表的树化条件\n\n### 条件1:链表已有8个节点，第9个节点插入链表时树化。\n\n#### 8个节点，未树化。\n![案例图-未树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E9%93%BE8%E6%9C%AA%E6%A0%91%E5%8C%96.jpg?raw=true)\n\n#### 9个节点，树化。\n![案例图-树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E4%BD%8D%E7%BD%AE%E7%AC%AC9%E4%B8%AA%E7%BB%93%E7%82%B9%E6%A0%91%E5%8C%96.jpg?raw=true)\n\n#### 插入结点源码解析\n当前count值要大于等于 TREEIFY_THRESHOLD(8) - 1，计数器从0开始计数，到7刚好是8个结点。遍历时从第2个节点开始，故当前待插入节点是8 + 1，第九个节点进行树化。\n\n```\n            else {\n                // 遍历单链表，判断相同，直到找到空值\n                for (int binCount = 0; ; ++binCount) {\n                // 重点这里e是第2个节点。\n                    if ((e = p.next) == null) {\n                        // 待插入结点已插入\n                        p.next = newNode(hash, key, value, null);\n                        // 树化条件1: 当前count值大于等于 8 - 1，当前待插入结点如果是第九个结点（[0-7]为8个，从第二个节点开始故加1，所以待插入是第九个节点）就树化。\n                        if (binCount >= TREEIFY_THRESHOLD - 1)\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n```\n\n### 条件2:表的长度大于或等于64\n\n#### 树化方法源码解析\n**treeifyBin(tab, hash)方法**\n表的长度小于MIN_TREEIFY_CAPACITY(64)，就不进行树化操作，resize扩容即可。反之，表的长度大于或等于64，才可以进行链表树化的操作。\n```\n    final void treeifyBin(Node<K,V>[] tab, int hash) {\n        int n, index; Node<K,V> e;\n        // 表长度小于 MIN_TREEIFY_CAPACITY 64，此时扩容即可不需要进行树化操作。\n        if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n            resize();\n        \n        // 表长大于等于64，才需要进行树化操作\n        else if ((e = tab[index = (n - 1) & hash]) != null) {\n            TreeNode<K,V> hd = null, tl = null;\n            do {\n                TreeNode<K,V> p = replacementTreeNode(e, null);\n                if (tl == null)\n                    hd = p;\n                else {\n                    p.prev = tl;\n                    tl.next = p;\n                }\n                tl = p;\n            } while ((e = e.next) != null);\n            if ((tab[index] = hd) != null)\n                hd.treeify(tab);\n        }\n    }\n```\n\n## 2.自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\n\nequals方法是比较两个对象是否相同的方法，Object基础实现是比较hashCode，也就是对象的地址。\n我们自定义类型如果想当作HashMap的键是需要重写equals方法的，否则两个对象的属性值相同，但是却不是同一个对象，地址不相同导致最终结果不相等。如果作为键的对象没有重写equals，这肯定是有问题的。\n\nhashCode方法，是唯一标识一个对象的方法，Object默认实现时返回对象的地址。\n**HashCode重写时需要注意以下几点：**\n1. hashCode方法中不能包含equals方法中没有的字段。\n2. String和其它包装类型已有的hashCode可以直接调用。\n3. hash = 31 * hash + (field != null ? field.hashCode : 0)；可以应用于hashCode方法当中。因为任何数 n * 31都可以被JVM优化为 (n<<5)-n 这个表达式，移位和减法要比其它的操作快速的多。\n\n**《Effective Java》中提出了一种简单通用的hashCode算法：**\n1. 初始化一个整型的变量，并为此变量富裕一个非零的常数值，如 int code = 13;\n2. 如果对象中有String或其它包装类型，则递归调用该属性的hashCode，如果属性为空则处理为0。\n\n**案例**\n```\n    @Override\n    public int hashCode() {\n        int hash = 13;\n        hash = hash * 31 + (name != null ? name.hashCode() : 0);\n        hash = hash * 31 + (location != null ? location.hashCode() : 0);\n        return hash;\n    }\n```\n\n## 3. HashMap和HashTable有哪些不同？\n\n\n1. 初始容量：HashMap是16，HashTable是11。\n\n2. HashTable是线程安全的，HashMap是线程不安全的。HashTable在读写方法前使用了synchronized同步锁HashMap就没有这些安全机制，多线程环境下使用是有问题的。\n\n3. HashTable没有树化的操作，就仅仅是数组加链表。HashMap由于被到处引用，为了避免Hash冲突导致链表过长的问题，就引入了红黑树树化操作。\n\n### 3.1 为什么HashMap和HashTable容量规则不同？\n![案例图-未树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E8%BF%9D%E8%83%8C%E9%99%A4%E6%B3%95%E6%95%A3%E5%88%97%E6%B3%95%E8%A7%84%E5%88%99.png?raw=true)\nHashMap为了效率违背了算法导论的推荐，所以是有弊端的，HashMap为了弥补这个弊端，就重写了hash算法，加入了高位特征的扰动函数。使得h(k)结果足够分散。\n\n### 3.2 HashMap红黑树可能出现的实际诱因？\n\n**HashMap 1.7 导致的Tomcat的DoS问题**\n\nURL：[http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E)\n\n上面链接的页面是来自Tomcat邮件组的讨论。Tomcat参数是用HashMap存储的，故如果参数有5W个，并且有心人构造了hash冲突比较严重的参数，此时链表的长度很长，查询参数就占用了CPU很多资源，就可能出现Dos问题（DoS时CPU100%）。\n\n## 4. HashMap为什么链表超过8个结点会树化？\n```\n    static final int TREEIFY_THRESHOLD = 8;\n```\n\n![案例图-未树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%B3%A8%E9%87%8A%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?raw=true)\n\n上图是JDK1.8HashMap源码中提供的泊松分布的注释，泊松分布链表中出现8个元素的概率是极低的，所以出现红黑树概率很低。并且树化条件并不只是链表长度超过8，数组长度也要是64及以上才行。","source":"_posts/JUC-HashMap.md","raw":"---\ntitle: HashMap JDK1.8\ndate: 2019-10-10 08:00:00\nexcerpt: HashMap是我们日常开发过程中频繁使用的工具类，其中包含很多基础的数据结构和算法。故深入理解HashMap的源代码，分析其中一些巧妙地计算设计，可以提高自己对编程的理解。\ncategories: JDK源码分析\ntags:\n- 容器\n- HashMap\n- JUC\n---\n\n\n\n# 一、数据结构\n\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84JDK1.8.jpg?raw=true)\n\nHashMap是java的util包中一个高效的查询容器，内部是类似哈希表的数据结构，哈希表以键值对为基础存储和查询数据，它的查询效率是O(1)。\n\n**数据结构**\n- 数组：基于数组下标随机访问，查询速度快。\n- 链表：通过链地址法解决Hash冲突。\n- 红黑树：使用红黑树logn(n指的是链上的数量)级别的查询效率，解决链表过长查询效率低的问题。\n\n## 1. 数组\n**哈希表数组**\n```\ntransient Node<K,V>[] table;\n```\n**描述**\nHashMap实际存储键值数据的是名为talbe的字段，table是Node结点类型的数组。\n\n## 2. 链表\n**哈希表元素的数据结构**\n```\nstatic class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;\n        final K key;\n        V value;\n        Node<K,V> next;\n        // ... ...\n}\n```\n**描述**\n每一个结点都有一个hash、key、value和next，结点是构成单链表的基础数据结构。\n\n## 3. 红黑树\n**哈希表树结点的数据结构**\n```\nstatic final class TreeNode<K,V> extends LinkedHashMap.Entry<K,V> {\n        TreeNode<K,V> parent;  // red-black tree links\n        TreeNode<K,V> left;\n        TreeNode<K,V> right;\n        TreeNode<K,V> prev;    // needed to unlink next upon deletion\n        boolean red;\n        // ... ...\n}\n```\n\n**描述**\nHashMap在1.8之后引入了红黑树的概念，红黑树是二叉搜索树的一种，常规的二叉搜索树只需要满足结点的值大于做孩子的值小于右孩子的值即可。但是红黑树不仅仅是这样，红黑树需要满足以下的性质。\n\n### 红黑树的性质\n（来自算法导论第三版 p174）\n1. 每个结点或是红色的，或是黑色的。\n2. 根结点是黑色的。\n3. 每个叶结点（NIL）是黑色的。\n4. 如果一个结点是红色的，则它的两个子结点都是黑色的。\n5. 对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点。\n\n### 为什么使用红黑树？\n**二叉搜索树**\n传统的二叉搜索树最坏的情况下树的高度等于结点的数目，以至于查询数据达到了O(n)。\n\n**AVL树**\n平衡二叉树是一种平衡了树高的结构，使得任意一个结点的左右子树高差值不超过1。虽然AVL树可以弥补传统的二叉搜索树的缺点，但是它又引来了新的问题，当数据量大了的时候维护AVL树性质的自旋操作会很影响插入性能。\n\n**红黑树**\n通过红黑节点性质来维护树的结构，通过节点的颜色变换，简单的旋转赋值提高红黑树的插入性能。\n\n红黑树的最长路径不会超过最短路径的两倍，此时全黑10 + 黑10红9，不会超过两倍。**max <= 2\\*min**\n\n**数据结构小结**\n红黑树的是许多“平衡搜索树”中的一种，它是一种似平衡的状态，它可以保证在最坏的情况下基本动态集合的操作时间复杂度为O(logn)。\n\n\n# 二、哈希寻址\n\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80.jpg?raw=true)\n\n**寻址流程**\n1. 使用key执行**hash算法**，用key的hashCode方法返回值当作**扰动函数**的基础数据，并计算最终哈希值。\n2. 根据返回的哈希值与表长减一的值进行**与**运算hash & (n-1)，得到取模的结果。\n3. 把取模的结果当作目标下标进行相应的操作。\n\n**备注**\n表达式[hash & (n-1)] 和 [hash % n] 在表长为2的幂次的情况下，得到的结果是一致的，都可以作为取模操作。\n\n## 1. 哈希算法\n```\n    static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n    }\n```\nhash算法的目的是为了让不同的key哈希的结果更加离散，防止链表过长或红黑树过高。\n上述HashMap的算法是基于键的hashCode返回值，参与到扰动函数的计算中，从而得到具体的哈希结果。这里需要注意当key为null的时候，返回的哈希值为0。\n\n## 2. 扰动函数\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0.jpg?raw=true)\n\n所谓的扰动函数是指，为了使得key尽可能的分散，我们需要使用到key的更多特征，而不仅仅是用其哈希值直接进行取模运算。上述扰动函数使用key哈希值和key哈希值无符号右移16位的值进行异或运算，引入了高16位的特征，增大哈希值的离散性。\n\n## 3. 为什么异或更加分散？\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%BC%82%E6%88%96%E7%9A%84%E4%BB%B7%E5%80%BC.jpg?raw=true)\n\n与操作和或操作对位上0和1的概率是不均衡的，而异或是均衡的。哈希值右移16位，正好是32位的一半，高16位和低16位异或，混合了原始哈希值的高低位的特征，以此来加大低位的随机性。\n\n\n# 三、关键方法\n\n## 1. 保存结点\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E7%9A%84%E4%BF%9D%E5%AD%98%E6%B5%81%E7%A8%8B.png?raw=true)\n\n**put方法会先进行hash，然后调用putVal方法进行实际处理。**\n```\n    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n```\n\n**putVal描述**\n1. 如果当前表为空或长度为0，重新构建一个默认容量的容器。\n2. 如果哈希寻址到的下标的元素为空，创建一个Node放入。\n3. 非以上情况\n   i. 如果当前key等于待插入元素的key，hash值也相同，替换原值。\n   ii. 如果当前结点是treeNode，使用红黑树的putTreeVal方法插入结点。\n   iii. 否则就遍历当前链表依次比较key和hash，如果相同替换原值，不同就继续遍历，直到下一个结点是空的就插入。 插入会判断当前是否是第八个结点，是的话且表长等于64，链表就树化。\n4. 返回该key的原值，若没有则返回为空。\n\n```\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        if ((tab = table) == null || (n = tab.length) == 0)\n            // 哈希表为空初始化\n            n = (tab = resize()).length;\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            // 索引位置为空，放入当前结点\n            tab[i] = newNode(hash, key, value, null);\n        else {\n            Node<K,V> e; K k;\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                // 键相同值替换，后面判断替换值\n                e = p;\n            else if (p instanceof TreeNode)\n                // 树结点，使用红黑树的插入方法\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            else {\n                // 遍历链表\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    // 相同的键则跳出循环，判断替换原值\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            // 替换原值\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n```\n\n\n## 2. 查询结点\n\n**get方法会先hash然后getNode寻找值**\n\n```\n    public V get(Object key) {\n        Node<K,V> e;\n        return (e = getNode(hash(key), key)) == null ? null : e.value;\n    }\n```\n\n**getNode描述**\n1. 根据hash与运算求得数组下标位置，并判断是否有值。\n2. 有值的话，则判断查询的key，是否等于first结点的key，等于则返回。\n3. 头结点不等于的话，判断是否是红黑树的结点，是红黑树的结点就走红黑树的查询逻辑。\n4. 不是红黑树的结点就遍历单链表查询。\n\n```\n    final Node<K,V> getNode(int hash, Object key) {\n        Node<K,V>[] tab; Node<K,V> first, e; int n; K k;\n        if ((tab = table) != null && (n = tab.length) > 0 &&\n            \n            // 找hash值对应到数组中的元素下标，判断下标位置是否为空\n            (first = tab[(n - 1) & hash]) != null) {\n            \n            // 判断头结点\n            if (first.hash == hash && \n                ((k = first.key) == key || (key != null && key.equals(k))))\n                return first;\n            if ((e = first.next) != null) {\n            \n            // 判断是否是树结点\n                if (first instanceof TreeNode)\n                    return ((TreeNode<K,V>)first).getTreeNode(hash, key);\n                    \n                // 遍历单链表\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        return e;\n                } while ((e = e.next) != null);\n            }\n        }\n        return null;\n    }\n\n```\n\n## 3. 哈希表扩容\nHashMap 的扩容在 put 操作中会触发扩容，主要是这个方法:\n```\nfinal Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        // ... ...\n \t\t// 定义新哈希表\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) {\n        \t// 老哈希表内容复制到新的哈希表\n            for (int j = 0; j < oldCap; ++j) {\n                if ((e = oldTab[j]) != null) {\n                        // ... ...\n                    else {\n                    \t// 当前链表拆成两个链表，原位置表loHead，新位置表hiHead。\n                        Node<K,V> loHead = null, loTail = null;\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                            next = e.next;\n                            if ((e.hash & oldCap) == 0) {\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        // 原位置表lohead设置到新表的原位置上。\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        // 新位置表hihead设置到新表的原位置+原表长的位置上。\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n\t\t// ... ...\n    }\n```\n\nHashMap一次扩容的过程:\n1、取当前table的2倍作为新table的大小。\n2、根据算出的新table的大小new出一个新的Entry数组来，名为newTab。\n3、HashMap中的table指向newTable。\n3、轮询原table的每一个位置，将每个位置上连接的Entry，算出在新table上的位置，并以链表形式连接。原table上的所有Entry全部轮询完毕之后，意味着原table上面的所有Entry已经移到了新的table上。\n\n### 扩容案例\n\n扩容前：\n\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%89%8D.jpg?raw=true)\n\n扩容后：\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%90%8E.jpg?raw=true)\n\n### 扩容后数组的定位\n![案例图](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%A9%E5%AE%B9%E5%89%8D%E5%90%8E%E4%BD%8D%E7%BD%AE%E8%A7%84%E5%88%99.png?raw=true)\n\n如图可知，扩容前的Hash值[A - F]都在同一个链表上，扩容后则链表就会拆开[ABC]在4位置，[DEF]在20位置。扩容后原来的链表元素仅可能出现在两个位置，如果链表元素原来在 x 位置上，那么扩容后的两个点位就是 x 和 x + 16的位置上。\n\n故上图原来都在一个链表上，那么扩容就是4和20两个位置。\n\n\n## 4. put和putIfAbsent区别\n\n**put方法onlyIfAbsent传的是false**\n```\n    public V put(K key, V value) {\n        return putVal(hash(key), key, value, false, true);\n    }\n    \n    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict)\n\n```\n**putIfAbsent方法onlyIfAbsent传的是true**\n```\n    public V putIfAbsent(K key, V value) {\n        return putVal(hash(key), key, value, true, true);\n    }\n```\n**putVal的onlyIfAbsent参数是干嘛的**\n```\n            // 键相同替换原值的逻辑\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                // 如果onlyIfAbsent是false则是替换原值的\n                // onlyIfAbsent是true则是不会替换原值的\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n\n```\n\n### putIfAbsent小结\nonlyIfAbsent参数为false，则新值会替换原值并且返回原值。\nonlyIfAbsent参数为true，则原值不变并且返回原值。\n\n# 四、其他\n\n## 1. 澄清HashMap链表的树化条件\n\n### 条件1:链表已有8个节点，第9个节点插入链表时树化。\n\n#### 8个节点，未树化。\n![案例图-未树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E9%93%BE8%E6%9C%AA%E6%A0%91%E5%8C%96.jpg?raw=true)\n\n#### 9个节点，树化。\n![案例图-树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E4%BD%8D%E7%BD%AE%E7%AC%AC9%E4%B8%AA%E7%BB%93%E7%82%B9%E6%A0%91%E5%8C%96.jpg?raw=true)\n\n#### 插入结点源码解析\n当前count值要大于等于 TREEIFY_THRESHOLD(8) - 1，计数器从0开始计数，到7刚好是8个结点。遍历时从第2个节点开始，故当前待插入节点是8 + 1，第九个节点进行树化。\n\n```\n            else {\n                // 遍历单链表，判断相同，直到找到空值\n                for (int binCount = 0; ; ++binCount) {\n                // 重点这里e是第2个节点。\n                    if ((e = p.next) == null) {\n                        // 待插入结点已插入\n                        p.next = newNode(hash, key, value, null);\n                        // 树化条件1: 当前count值大于等于 8 - 1，当前待插入结点如果是第九个结点（[0-7]为8个，从第二个节点开始故加1，所以待插入是第九个节点）就树化。\n                        if (binCount >= TREEIFY_THRESHOLD - 1)\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n```\n\n### 条件2:表的长度大于或等于64\n\n#### 树化方法源码解析\n**treeifyBin(tab, hash)方法**\n表的长度小于MIN_TREEIFY_CAPACITY(64)，就不进行树化操作，resize扩容即可。反之，表的长度大于或等于64，才可以进行链表树化的操作。\n```\n    final void treeifyBin(Node<K,V>[] tab, int hash) {\n        int n, index; Node<K,V> e;\n        // 表长度小于 MIN_TREEIFY_CAPACITY 64，此时扩容即可不需要进行树化操作。\n        if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n            resize();\n        \n        // 表长大于等于64，才需要进行树化操作\n        else if ((e = tab[index = (n - 1) & hash]) != null) {\n            TreeNode<K,V> hd = null, tl = null;\n            do {\n                TreeNode<K,V> p = replacementTreeNode(e, null);\n                if (tl == null)\n                    hd = p;\n                else {\n                    p.prev = tl;\n                    tl.next = p;\n                }\n                tl = p;\n            } while ((e = e.next) != null);\n            if ((tab[index] = hd) != null)\n                hd.treeify(tab);\n        }\n    }\n```\n\n## 2.自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\n\nequals方法是比较两个对象是否相同的方法，Object基础实现是比较hashCode，也就是对象的地址。\n我们自定义类型如果想当作HashMap的键是需要重写equals方法的，否则两个对象的属性值相同，但是却不是同一个对象，地址不相同导致最终结果不相等。如果作为键的对象没有重写equals，这肯定是有问题的。\n\nhashCode方法，是唯一标识一个对象的方法，Object默认实现时返回对象的地址。\n**HashCode重写时需要注意以下几点：**\n1. hashCode方法中不能包含equals方法中没有的字段。\n2. String和其它包装类型已有的hashCode可以直接调用。\n3. hash = 31 * hash + (field != null ? field.hashCode : 0)；可以应用于hashCode方法当中。因为任何数 n * 31都可以被JVM优化为 (n<<5)-n 这个表达式，移位和减法要比其它的操作快速的多。\n\n**《Effective Java》中提出了一种简单通用的hashCode算法：**\n1. 初始化一个整型的变量，并为此变量富裕一个非零的常数值，如 int code = 13;\n2. 如果对象中有String或其它包装类型，则递归调用该属性的hashCode，如果属性为空则处理为0。\n\n**案例**\n```\n    @Override\n    public int hashCode() {\n        int hash = 13;\n        hash = hash * 31 + (name != null ? name.hashCode() : 0);\n        hash = hash * 31 + (location != null ? location.hashCode() : 0);\n        return hash;\n    }\n```\n\n## 3. HashMap和HashTable有哪些不同？\n\n\n1. 初始容量：HashMap是16，HashTable是11。\n\n2. HashTable是线程安全的，HashMap是线程不安全的。HashTable在读写方法前使用了synchronized同步锁HashMap就没有这些安全机制，多线程环境下使用是有问题的。\n\n3. HashTable没有树化的操作，就仅仅是数组加链表。HashMap由于被到处引用，为了避免Hash冲突导致链表过长的问题，就引入了红黑树树化操作。\n\n### 3.1 为什么HashMap和HashTable容量规则不同？\n![案例图-未树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E8%BF%9D%E8%83%8C%E9%99%A4%E6%B3%95%E6%95%A3%E5%88%97%E6%B3%95%E8%A7%84%E5%88%99.png?raw=true)\nHashMap为了效率违背了算法导论的推荐，所以是有弊端的，HashMap为了弥补这个弊端，就重写了hash算法，加入了高位特征的扰动函数。使得h(k)结果足够分散。\n\n### 3.2 HashMap红黑树可能出现的实际诱因？\n\n**HashMap 1.7 导致的Tomcat的DoS问题**\n\nURL：[http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E](http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E)\n\n上面链接的页面是来自Tomcat邮件组的讨论。Tomcat参数是用HashMap存储的，故如果参数有5W个，并且有心人构造了hash冲突比较严重的参数，此时链表的长度很长，查询参数就占用了CPU很多资源，就可能出现Dos问题（DoS时CPU100%）。\n\n## 4. HashMap为什么链表超过8个结点会树化？\n```\n    static final int TREEIFY_THRESHOLD = 8;\n```\n\n![案例图-未树化](https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%B3%A8%E9%87%8A%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?raw=true)\n\n上图是JDK1.8HashMap源码中提供的泊松分布的注释，泊松分布链表中出现8个元素的概率是极低的，所以出现红黑树概率很低。并且树化条件并不只是链表长度超过8，数组长度也要是64及以上才行。","slug":"JUC-HashMap","published":1,"updated":"2021-09-05T13:59:57.208Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckt7cmj6b00010cw0fwtb1fdv","content":"<h1 id=\"一、数据结构\"><a href=\"#一、数据结构\" class=\"headerlink\" title=\"一、数据结构\"></a>一、数据结构</h1><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84JDK1.8.jpg?raw=true\" alt=\"案例图\"></p>\n<p>HashMap是java的util包中一个高效的查询容器，内部是类似哈希表的数据结构，哈希表以键值对为基础存储和查询数据，它的查询效率是O(1)。</p>\n<p><strong>数据结构</strong></p>\n<ul>\n<li>数组：基于数组下标随机访问，查询速度快。</li>\n<li>链表：通过链地址法解决Hash冲突。</li>\n<li>红黑树：使用红黑树logn(n指的是链上的数量)级别的查询效率，解决链表过长查询效率低的问题。</li>\n</ul>\n<h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2><p><strong>哈希表数组</strong></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">transient <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">&lt;K</span>,V&gt;[] table;<br></code></pre></td></tr></table></figure>\n<p><strong>描述</strong><br>HashMap实际存储键值数据的是名为talbe的字段，table是Node结点类型的数组。</p>\n<h2 id=\"2-链表\"><a href=\"#2-链表\" class=\"headerlink\" title=\"2. 链表\"></a>2. 链表</h2><p><strong>哈希表元素的数据结构</strong></p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">K</span>,<span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span>.<span class=\"hljs-title\">Entry</span>&lt;<span class=\"hljs-title\">K</span>,<span class=\"hljs-title\">V</span>&gt; </span>&#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span> hash;<br>        <span class=\"hljs-keyword\">final</span> K key;<br>        V value;<br>        Node&lt;K,V&gt; <span class=\"hljs-keyword\">next</span>;<br>        <span class=\"hljs-comment\">// ... ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>描述</strong><br>每一个结点都有一个hash、key、value和next，结点是构成单链表的基础数据结构。</p>\n<h2 id=\"3-红黑树\"><a href=\"#3-红黑树\" class=\"headerlink\" title=\"3. 红黑树\"></a>3. 红黑树</h2><p><strong>哈希表树结点的数据结构</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">static <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TreeNode&lt;K</span>,<span class=\"hljs-title\">V&gt;</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">LinkedHashMap</span>.<span class=\"hljs-title\">Entry&lt;K</span>,<span class=\"hljs-title\">V&gt;</span> </span>&#123;<br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; parent;  <span class=\"hljs-comment\">// red-black tree links</span><br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; left;<br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; right;<br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; prev;    <span class=\"hljs-comment\">// needed to unlink next upon deletion</span><br>        boolean red;<br>        <span class=\"hljs-comment\">// ... ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>描述</strong><br>HashMap在1.8之后引入了红黑树的概念，红黑树是二叉搜索树的一种，常规的二叉搜索树只需要满足结点的值大于做孩子的值小于右孩子的值即可。但是红黑树不仅仅是这样，红黑树需要满足以下的性质。</p>\n<h3 id=\"红黑树的性质\"><a href=\"#红黑树的性质\" class=\"headerlink\" title=\"红黑树的性质\"></a>红黑树的性质</h3><p>（来自算法导论第三版 p174）</p>\n<ol>\n<li>每个结点或是红色的，或是黑色的。</li>\n<li>根结点是黑色的。</li>\n<li>每个叶结点（NIL）是黑色的。</li>\n<li>如果一个结点是红色的，则它的两个子结点都是黑色的。</li>\n<li>对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点。</li>\n</ol>\n<h3 id=\"为什么使用红黑树？\"><a href=\"#为什么使用红黑树？\" class=\"headerlink\" title=\"为什么使用红黑树？\"></a>为什么使用红黑树？</h3><p><strong>二叉搜索树</strong><br>传统的二叉搜索树最坏的情况下树的高度等于结点的数目，以至于查询数据达到了O(n)。</p>\n<p><strong>AVL树</strong><br>平衡二叉树是一种平衡了树高的结构，使得任意一个结点的左右子树高差值不超过1。虽然AVL树可以弥补传统的二叉搜索树的缺点，但是它又引来了新的问题，当数据量大了的时候维护AVL树性质的自旋操作会很影响插入性能。</p>\n<p><strong>红黑树</strong><br>通过红黑节点性质来维护树的结构，通过节点的颜色变换，简单的旋转赋值提高红黑树的插入性能。</p>\n<p>红黑树的最长路径不会超过最短路径的两倍，此时全黑10 + 黑10红9，不会超过两倍。<strong>max &lt;= 2*min</strong></p>\n<p><strong>数据结构小结</strong><br>红黑树的是许多“平衡搜索树”中的一种，它是一种似平衡的状态，它可以保证在最坏的情况下基本动态集合的操作时间复杂度为O(logn)。</p>\n<h1 id=\"二、哈希寻址\"><a href=\"#二、哈希寻址\" class=\"headerlink\" title=\"二、哈希寻址\"></a>二、哈希寻址</h1><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80.jpg?raw=true\" alt=\"案例图\"></p>\n<p><strong>寻址流程</strong></p>\n<ol>\n<li>使用key执行<strong>hash算法</strong>，用key的hashCode方法返回值当作<strong>扰动函数</strong>的基础数据，并计算最终哈希值。</li>\n<li>根据返回的哈希值与表长减一的值进行<strong>与</strong>运算hash &amp; (n-1)，得到取模的结果。</li>\n<li>把取模的结果当作目标下标进行相应的操作。</li>\n</ol>\n<p><strong>备注</strong><br>表达式[hash &amp; (n-1)] 和 [hash % n] 在表长为2的幂次的情况下，得到的结果是一致的，都可以作为取模操作。</p>\n<h2 id=\"1-哈希算法\"><a href=\"#1-哈希算法\" class=\"headerlink\" title=\"1. 哈希算法\"></a>1. 哈希算法</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span> hash(<span class=\"hljs-keyword\">Object</span> <span class=\"hljs-built_in\">key</span>) &#123;<br>    <span class=\"hljs-built_in\">int</span> h;<br>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">key</span> == <span class=\"hljs-keyword\">null</span>) ? <span class=\"hljs-number\">0</span> : (h = <span class=\"hljs-built_in\">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"hljs-number\">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>hash算法的目的是为了让不同的key哈希的结果更加离散，防止链表过长或红黑树过高。<br>上述HashMap的算法是基于键的hashCode返回值，参与到扰动函数的计算中，从而得到具体的哈希结果。这里需要注意当key为null的时候，返回的哈希值为0。</p>\n<h2 id=\"2-扰动函数\"><a href=\"#2-扰动函数\" class=\"headerlink\" title=\"2. 扰动函数\"></a>2. 扰动函数</h2><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0.jpg?raw=true\" alt=\"案例图\"></p>\n<p>所谓的扰动函数是指，为了使得key尽可能的分散，我们需要使用到key的更多特征，而不仅仅是用其哈希值直接进行取模运算。上述扰动函数使用key哈希值和key哈希值无符号右移16位的值进行异或运算，引入了高16位的特征，增大哈希值的离散性。</p>\n<h2 id=\"3-为什么异或更加分散？\"><a href=\"#3-为什么异或更加分散？\" class=\"headerlink\" title=\"3. 为什么异或更加分散？\"></a>3. 为什么异或更加分散？</h2><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%BC%82%E6%88%96%E7%9A%84%E4%BB%B7%E5%80%BC.jpg?raw=true\" alt=\"案例图\"></p>\n<p>与操作和或操作对位上0和1的概率是不均衡的，而异或是均衡的。哈希值右移16位，正好是32位的一半，高16位和低16位异或，混合了原始哈希值的高低位的特征，以此来加大低位的随机性。</p>\n<h1 id=\"三、关键方法\"><a href=\"#三、关键方法\" class=\"headerlink\" title=\"三、关键方法\"></a>三、关键方法</h1><h2 id=\"1-保存结点\"><a href=\"#1-保存结点\" class=\"headerlink\" title=\"1. 保存结点\"></a>1. 保存结点</h2><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E7%9A%84%E4%BF%9D%E5%AD%98%E6%B5%81%E7%A8%8B.png?raw=true\" alt=\"案例图\"></p>\n<p><strong>put方法会先进行hash，然后调用putVal方法进行实际处理。</strong></p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">public V <span class=\"hljs-built_in\">put</span>(K <span class=\"hljs-built_in\">key</span>, V value) &#123;<br>    <span class=\"hljs-built_in\">return</span> putVal(hash(<span class=\"hljs-built_in\">key</span>), <span class=\"hljs-built_in\">key</span>, value, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>putVal描述</strong></p>\n<ol>\n<li>如果当前表为空或长度为0，重新构建一个默认容量的容器。</li>\n<li>如果哈希寻址到的下标的元素为空，创建一个Node放入。</li>\n<li>非以上情况<br>i. 如果当前key等于待插入元素的key，hash值也相同，替换原值。<br>ii. 如果当前结点是treeNode，使用红黑树的putTreeVal方法插入结点。<br>iii. 否则就遍历当前链表依次比较key和hash，如果相同替换原值，不同就继续遍历，直到下一个结点是空的就插入。 插入会判断当前是否是第八个结点，是的话且表长等于64，链表就树化。</li>\n<li>返回该key的原值，若没有则返回为空。</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">final V put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">hash</span>, K <span class=\"hljs-params\">key</span>, V <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">onlyIfAbsent</span>,<span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">evict</span>)</span> &#123;<br>        Node&lt;K,V&gt;<span class=\"hljs-literal\">[]</span> tab; Node&lt;K,V&gt; p; <span class=\"hljs-built_in\">int</span> n, i;<br>        <span class=\"hljs-keyword\">if</span> ((tab = table)<span class=\"hljs-operator\"> == </span>null<span class=\"hljs-operator\"> || </span>(n = tab.length)<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-comment\">// 哈希表为空初始化</span><br>            n = (tab = resize<span class=\"hljs-literal\">()</span>).length;<br>        <span class=\"hljs-keyword\">if</span> ((p = tab<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span> = (<span class=\"hljs-identifier\">n</span> - <span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-identifier\">hash</span>]</span>)<span class=\"hljs-operator\"> == </span>null)<br>            <span class=\"hljs-comment\">// 索引位置为空，放入当前结点</span><br>            tab<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span> = <span class=\"hljs-keyword\">new</span><span class=\"hljs-constructor\">Node(<span class=\"hljs-params\">hash</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">null</span>)</span>;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            Node&lt;K,V&gt; e; K k;<br>            <span class=\"hljs-keyword\">if</span> (p.hash<span class=\"hljs-operator\"> == </span>hash<span class=\"hljs-operator\"> &amp;&amp;</span><br><span class=\"hljs-operator\">                </span>((k = p.key)<span class=\"hljs-operator\"> == </span>key<span class=\"hljs-operator\"> || </span>(key != null<span class=\"hljs-operator\"> &amp;&amp; </span>key.equals(k))))<br>                <span class=\"hljs-comment\">// 键相同值替换，后面判断替换值</span><br>                e = p;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p instanceof TreeNode)<br>                <span class=\"hljs-comment\">// 树结点，使用红黑树的插入方法</span><br>                e = ((TreeNode&lt;K,V&gt;)p).put<span class=\"hljs-constructor\">TreeVal(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">tab</span>, <span class=\"hljs-params\">hash</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>)</span>;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 遍历链表</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> binCount = <span class=\"hljs-number\">0</span>; ; ++binCount) &#123;<br>                    <span class=\"hljs-keyword\">if</span> ((e = p.next)<span class=\"hljs-operator\"> == </span>null) &#123;<br>                        p.next = <span class=\"hljs-keyword\">new</span><span class=\"hljs-constructor\">Node(<span class=\"hljs-params\">hash</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">null</span>)</span>;<br>                        <span class=\"hljs-keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// -1 for 1st</span><br>                            treeify<span class=\"hljs-constructor\">Bin(<span class=\"hljs-params\">tab</span>, <span class=\"hljs-params\">hash</span>)</span>;<br>                        break;<br>                    &#125;<br>                    <span class=\"hljs-comment\">// 相同的键则跳出循环，判断替换原值</span><br>                    <span class=\"hljs-keyword\">if</span> (e.hash<span class=\"hljs-operator\"> == </span>hash<span class=\"hljs-operator\"> &amp;&amp;</span><br><span class=\"hljs-operator\">                        </span>((k = e.key)<span class=\"hljs-operator\"> == </span>key<span class=\"hljs-operator\"> || </span>(key != null<span class=\"hljs-operator\"> &amp;&amp; </span>key.equals(k))))<br>                        break;<br>                    p = e;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-comment\">// 替换原值</span><br>            <span class=\"hljs-keyword\">if</span> (e != null) &#123; <span class=\"hljs-comment\">// existing mapping for key</span><br>                V oldValue = e.value;<br>                <span class=\"hljs-keyword\">if</span> (!onlyIfAbsent<span class=\"hljs-operator\"> || </span>oldValue<span class=\"hljs-operator\"> == </span>null)<br>                    e.value = value;<br>                after<span class=\"hljs-constructor\">NodeAccess(<span class=\"hljs-params\">e</span>)</span>;<br>                return oldValue;<br>            &#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-查询结点\"><a href=\"#2-查询结点\" class=\"headerlink\" title=\"2. 查询结点\"></a>2. 查询结点</h2><p><strong>get方法会先hash然后getNode寻找值</strong></p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-built_in\">get</span>(<span class=\"hljs-keyword\">Object</span> <span class=\"hljs-built_in\">key</span>) &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class=\"hljs-keyword\">return</span> (e = getNode(hash(<span class=\"hljs-built_in\">key</span>), <span class=\"hljs-built_in\">key</span>)) == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-keyword\">null</span> : e.value;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>getNode描述</strong></p>\n<ol>\n<li>根据hash与运算求得数组下标位置，并判断是否有值。</li>\n<li>有值的话，则判断查询的key，是否等于first结点的key，等于则返回。</li>\n<li>头结点不等于的话，判断是否是红黑树的结点，是红黑树的结点就走红黑树的查询逻辑。</li>\n<li>不是红黑树的结点就遍历单链表查询。</li>\n</ol>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">final Node&lt;K,V&gt; getNode(<span class=\"hljs-type\">int</span> hash, Object <span class=\"hljs-built_in\">key</span>) &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; <span class=\"hljs-built_in\">first</span>, e; <span class=\"hljs-type\">int</span> n; K k;<br>    if ((tab = table) != <span class=\"hljs-built_in\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"hljs-number\">0</span> &amp;&amp;<br>        <br>        <span class=\"hljs-comment\">// 找hash值对应到数组中的元素下标，判断下标位置是否为空</span><br>        (<span class=\"hljs-built_in\">first</span> = tab[(n - <span class=\"hljs-number\">1</span>) &amp; hash]) != <span class=\"hljs-built_in\">null</span>) &#123;<br>        <br>        <span class=\"hljs-comment\">// 判断头结点</span><br>        if (<span class=\"hljs-built_in\">first</span>.hash == hash &amp;&amp; <br>            ((k = <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">key</span>) == <span class=\"hljs-built_in\">key</span> || (<span class=\"hljs-built_in\">key</span> != <span class=\"hljs-built_in\">null</span> &amp;&amp; <span class=\"hljs-built_in\">key</span>.equals(k))))<br>            return <span class=\"hljs-built_in\">first</span>;<br>        if ((e = <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">next</span>) != <span class=\"hljs-built_in\">null</span>) &#123;<br>        <br>        <span class=\"hljs-comment\">// 判断是否是树结点</span><br>            if (<span class=\"hljs-built_in\">first</span> instanceof TreeNode)<br>                return ((TreeNode&lt;K,V&gt;)<span class=\"hljs-built_in\">first</span>).getTreeNode(hash, <span class=\"hljs-built_in\">key</span>);<br>                <br>            <span class=\"hljs-comment\">// 遍历单链表</span><br>            <span class=\"hljs-keyword\">do</span> &#123;<br>                if (e.hash == hash &amp;&amp;<br>                    ((k = e.<span class=\"hljs-built_in\">key</span>) == <span class=\"hljs-built_in\">key</span> || (<span class=\"hljs-built_in\">key</span> != <span class=\"hljs-built_in\">null</span> &amp;&amp; <span class=\"hljs-built_in\">key</span>.equals(k))))<br>                    return e;<br>            &#125; <span class=\"hljs-keyword\">while</span> ((e = e.<span class=\"hljs-built_in\">next</span>) != <span class=\"hljs-built_in\">null</span>);<br>        &#125;<br>    &#125;<br>    return <span class=\"hljs-built_in\">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-哈希表扩容\"><a href=\"#3-哈希表扩容\" class=\"headerlink\" title=\"3. 哈希表扩容\"></a>3. 哈希表扩容</h2><p>HashMap 的扩容在 put 操作中会触发扩容，主要是这个方法:</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">final Node&lt;K,V&gt;[] resize() &#123;<br>        Node&lt;K,V&gt;[] oldTab = table;<br>        <span class=\"hljs-comment\">// ... ...</span><br> \t\t<span class=\"hljs-comment\">// 定义新哈希表</span><br>        Node&lt;K,V&gt;[] <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span> = (Node&lt;K,V&gt;[])<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Node</span>[<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Cap</span>];<br>        table = <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span>;<br>        <span class=\"hljs-keyword\">if</span> (oldTab != <span class=\"hljs-literal\">null</span>) &#123;<br>        \t<span class=\"hljs-comment\">// 老哈希表内容复制到新的哈希表</span><br>            <span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; oldCap; ++j) &#123;<br>                <span class=\"hljs-keyword\">if</span> ((e = oldTab[j]) != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-comment\">// ... ...</span><br>                    <span class=\"hljs-keyword\">else</span> &#123;<br>                    \t<span class=\"hljs-comment\">// 当前链表拆成两个链表，原位置表loHead，新位置表hiHead。</span><br>                        Node&lt;K,V&gt; loHead = <span class=\"hljs-literal\">null</span>, loTail = <span class=\"hljs-literal\">null</span>;<br>                        Node&lt;K,V&gt; hiHead = <span class=\"hljs-literal\">null</span>, hiTail = <span class=\"hljs-literal\">null</span>;<br>                        Node&lt;K,V&gt; next;<br>                        <span class=\"hljs-keyword\">do</span> &#123;<br>                            next = e.next;<br>                            <span class=\"hljs-keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"hljs-number\">0</span>) &#123;<br>                                <span class=\"hljs-keyword\">if</span> (loTail == <span class=\"hljs-literal\">null</span>)<br>                                    loHead = e;<br>                                <span class=\"hljs-keyword\">else</span><br>                                    loTail.next = e;<br>                                loTail = e;<br>                            &#125;<br>                            <span class=\"hljs-keyword\">else</span> &#123;<br>                                <span class=\"hljs-keyword\">if</span> (hiTail == <span class=\"hljs-literal\">null</span>)<br>                                    hiHead = e;<br>                                <span class=\"hljs-keyword\">else</span><br>                                    hiTail.next = e;<br>                                hiTail = e;<br>                            &#125;<br>                        &#125; <span class=\"hljs-keyword\">while</span> ((e = next) != <span class=\"hljs-literal\">null</span>);<br>                        <span class=\"hljs-comment\">// 原位置表lohead设置到新表的原位置上。</span><br>                        <span class=\"hljs-keyword\">if</span> (loTail != <span class=\"hljs-literal\">null</span>) &#123;<br>                            loTail.next = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span>[j] = loHead;<br>                        &#125;<br>                        <span class=\"hljs-comment\">// 新位置表hihead设置到新表的原位置+原表长的位置上。</span><br>                        <span class=\"hljs-keyword\">if</span> (hiTail != <span class=\"hljs-literal\">null</span>) &#123;<br>                            hiTail.next = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span>[j + oldCap] = hiHead;<br>                        &#125;<br>                    &#125;<br>\t\t<span class=\"hljs-comment\">// ... ...</span><br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>HashMap一次扩容的过程:<br>1、取当前table的2倍作为新table的大小。<br>2、根据算出的新table的大小new出一个新的Entry数组来，名为newTab。<br>3、HashMap中的table指向newTable。<br>3、轮询原table的每一个位置，将每个位置上连接的Entry，算出在新table上的位置，并以链表形式连接。原table上的所有Entry全部轮询完毕之后，意味着原table上面的所有Entry已经移到了新的table上。</p>\n<h3 id=\"扩容案例\"><a href=\"#扩容案例\" class=\"headerlink\" title=\"扩容案例\"></a>扩容案例</h3><p>扩容前：</p>\n<p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%89%8D.jpg?raw=true\" alt=\"案例图\"></p>\n<p>扩容后：<br><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%90%8E.jpg?raw=true\" alt=\"案例图\"></p>\n<h3 id=\"扩容后数组的定位\"><a href=\"#扩容后数组的定位\" class=\"headerlink\" title=\"扩容后数组的定位\"></a>扩容后数组的定位</h3><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%A9%E5%AE%B9%E5%89%8D%E5%90%8E%E4%BD%8D%E7%BD%AE%E8%A7%84%E5%88%99.png?raw=true\" alt=\"案例图\"></p>\n<p>如图可知，扩容前的Hash值[A - F]都在同一个链表上，扩容后则链表就会拆开[ABC]在4位置，[DEF]在20位置。扩容后原来的链表元素仅可能出现在两个位置，如果链表元素原来在 x 位置上，那么扩容后的两个点位就是 x 和 x + 16的位置上。</p>\n<p>故上图原来都在一个链表上，那么扩容就是4和20两个位置。</p>\n<h2 id=\"4-put和putIfAbsent区别\"><a href=\"#4-put和putIfAbsent区别\" class=\"headerlink\" title=\"4. put和putIfAbsent区别\"></a>4. put和putIfAbsent区别</h2><p><strong>put方法onlyIfAbsent传的是false</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public V put(K key, V value) &#123;<br>    return put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">hash</span>(<span class=\"hljs-params\">key</span>)</span>, key, value, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);<br>&#125;<br><br>final V put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">hash</span>, K <span class=\"hljs-params\">key</span>, V <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">onlyIfAbsent</span>,<span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">evict</span>)</span><br><br></code></pre></td></tr></table></figure>\n<p><strong>putIfAbsent方法onlyIfAbsent传的是true</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public V put<span class=\"hljs-constructor\">IfAbsent(K <span class=\"hljs-params\">key</span>, V <span class=\"hljs-params\">value</span>)</span> &#123;<br>    return put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">hash</span>(<span class=\"hljs-params\">key</span>)</span>, key, value, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>putVal的onlyIfAbsent参数是干嘛的</strong></p>\n<figure class=\"highlight stan\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stan\"><span class=\"hljs-comment\">// 键相同替换原值的逻辑</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">e</span> != null) &#123; <span class=\"hljs-comment\">// existing mapping for key</span><br>    V oldValue = <span class=\"hljs-built_in\">e</span>.value;<br>    <span class=\"hljs-comment\">// 如果onlyIfAbsent是false则是替换原值的</span><br>    <span class=\"hljs-comment\">// onlyIfAbsent是true则是不会替换原值的</span><br>    <span class=\"hljs-keyword\">if</span> (!onlyIfAbsent || oldValue == null)<br>        <span class=\"hljs-built_in\">e</span>.value = value;<br>    afterNodeAccess(<span class=\"hljs-built_in\">e</span>);<br>    <span class=\"hljs-keyword\">return</span> oldValue;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"putIfAbsent小结\"><a href=\"#putIfAbsent小结\" class=\"headerlink\" title=\"putIfAbsent小结\"></a>putIfAbsent小结</h3><p>onlyIfAbsent参数为false，则新值会替换原值并且返回原值。<br>onlyIfAbsent参数为true，则原值不变并且返回原值。</p>\n<h1 id=\"四、其他\"><a href=\"#四、其他\" class=\"headerlink\" title=\"四、其他\"></a>四、其他</h1><h2 id=\"1-澄清HashMap链表的树化条件\"><a href=\"#1-澄清HashMap链表的树化条件\" class=\"headerlink\" title=\"1. 澄清HashMap链表的树化条件\"></a>1. 澄清HashMap链表的树化条件</h2><h3 id=\"条件1-链表已有8个节点，第9个节点插入链表时树化。\"><a href=\"#条件1-链表已有8个节点，第9个节点插入链表时树化。\" class=\"headerlink\" title=\"条件1:链表已有8个节点，第9个节点插入链表时树化。\"></a>条件1:链表已有8个节点，第9个节点插入链表时树化。</h3><h4 id=\"8个节点，未树化。\"><a href=\"#8个节点，未树化。\" class=\"headerlink\" title=\"8个节点，未树化。\"></a>8个节点，未树化。</h4><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E9%93%BE8%E6%9C%AA%E6%A0%91%E5%8C%96.jpg?raw=true\" alt=\"案例图-未树化\"></p>\n<h4 id=\"9个节点，树化。\"><a href=\"#9个节点，树化。\" class=\"headerlink\" title=\"9个节点，树化。\"></a>9个节点，树化。</h4><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E4%BD%8D%E7%BD%AE%E7%AC%AC9%E4%B8%AA%E7%BB%93%E7%82%B9%E6%A0%91%E5%8C%96.jpg?raw=true\" alt=\"案例图-树化\"></p>\n<h4 id=\"插入结点源码解析\"><a href=\"#插入结点源码解析\" class=\"headerlink\" title=\"插入结点源码解析\"></a>插入结点源码解析</h4><p>当前count值要大于等于 TREEIFY_THRESHOLD(8) - 1，计数器从0开始计数，到7刚好是8个结点。遍历时从第2个节点开始，故当前待插入节点是8 + 1，第九个节点进行树化。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 遍历单链表，判断相同，直到找到空值</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> binCount = <span class=\"hljs-number\">0</span>; ; ++binCount) &#123;<br>    <span class=\"hljs-comment\">// 重点这里e是第2个节点。</span><br>        <span class=\"hljs-keyword\">if</span> ((e = p.next) == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 待插入结点已插入</span><br>            p.next = newNode(hash, <span class=\"hljs-built_in\">key</span>, value, <span class=\"hljs-keyword\">null</span>);<br>            <span class=\"hljs-comment\">// 树化条件1: 当前count值大于等于 8 - 1，当前待插入结点如果是第九个结点（[0-7]为8个，从第二个节点开始故加1，所以待插入是第九个节点）就树化。</span><br>            <span class=\"hljs-keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"hljs-number\">1</span>)<br>                treeifyBin(tab, hash);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (e.hash == hash &amp;&amp;<br>            ((k = e.<span class=\"hljs-built_in\">key</span>) == <span class=\"hljs-built_in\">key</span> || (<span class=\"hljs-built_in\">key</span> != <span class=\"hljs-keyword\">null</span> &amp;&amp; <span class=\"hljs-built_in\">key</span>.equals(k))))<br>            <span class=\"hljs-keyword\">break</span>;<br>        p = e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"条件2-表的长度大于或等于64\"><a href=\"#条件2-表的长度大于或等于64\" class=\"headerlink\" title=\"条件2:表的长度大于或等于64\"></a>条件2:表的长度大于或等于64</h3><h4 id=\"树化方法源码解析\"><a href=\"#树化方法源码解析\" class=\"headerlink\" title=\"树化方法源码解析\"></a>树化方法源码解析</h4><p><strong>treeifyBin(tab, hash)方法</strong><br>表的长度小于MIN_TREEIFY_CAPACITY(64)，就不进行树化操作，resize扩容即可。反之，表的长度大于或等于64，才可以进行链表树化的操作。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> treeifyBin(Node&lt;K,V&gt;[] tab, <span class=\"hljs-built_in\">int</span> hash) &#123;<br>    <span class=\"hljs-built_in\">int</span> n, <span class=\"hljs-keyword\">index</span>; Node&lt;K,V&gt; e;<br>    <span class=\"hljs-comment\">// 表长度小于 MIN_TREEIFY_CAPACITY 64，此时扩容即可不需要进行树化操作。</span><br>    <span class=\"hljs-keyword\">if</span> (tab == <span class=\"hljs-literal\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <br>    <span class=\"hljs-comment\">// 表长大于等于64，才需要进行树化操作</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((e = tab[<span class=\"hljs-keyword\">index</span> = (n - <span class=\"hljs-number\">1</span>) &amp; hash]) != <span class=\"hljs-literal\">null</span>) &#123;<br>        TreeNode&lt;K,V&gt; hd = <span class=\"hljs-literal\">null</span>, tl = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">do</span> &#123;<br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class=\"hljs-literal\">null</span>);<br>            <span class=\"hljs-keyword\">if</span> (tl == <span class=\"hljs-literal\">null</span>)<br>                hd = p;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                p.prev = tl;<br>                tl.<span class=\"hljs-keyword\">next</span> = p;<br>            &#125;<br>            tl = p;<br>        &#125; <span class=\"hljs-keyword\">while</span> ((e = e.<span class=\"hljs-keyword\">next</span>) != <span class=\"hljs-literal\">null</span>);<br>        <span class=\"hljs-keyword\">if</span> ((tab[<span class=\"hljs-keyword\">index</span>] = hd) != <span class=\"hljs-literal\">null</span>)<br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\"><a href=\"#2-自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\" class=\"headerlink\" title=\"2.自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\"></a>2.自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？</h2><p>equals方法是比较两个对象是否相同的方法，Object基础实现是比较hashCode，也就是对象的地址。<br>我们自定义类型如果想当作HashMap的键是需要重写equals方法的，否则两个对象的属性值相同，但是却不是同一个对象，地址不相同导致最终结果不相等。如果作为键的对象没有重写equals，这肯定是有问题的。</p>\n<p>hashCode方法，是唯一标识一个对象的方法，Object默认实现时返回对象的地址。<br><strong>HashCode重写时需要注意以下几点：</strong></p>\n<ol>\n<li>hashCode方法中不能包含equals方法中没有的字段。</li>\n<li>String和其它包装类型已有的hashCode可以直接调用。</li>\n<li>hash = 31 * hash + (field != null ? field.hashCode : 0)；可以应用于hashCode方法当中。因为任何数 n * 31都可以被JVM优化为 (n&lt;&lt;5)-n 这个表达式，移位和减法要比其它的操作快速的多。</li>\n</ol>\n<p><strong>《Effective Java》中提出了一种简单通用的hashCode算法：</strong></p>\n<ol>\n<li>初始化一个整型的变量，并为此变量富裕一个非零的常数值，如 int code = 13;</li>\n<li>如果对象中有String或其它包装类型，则递归调用该属性的hashCode，如果属性为空则处理为0。</li>\n</ol>\n<p><strong>案例</strong></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">@Override<br><span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">int</span> hashCode() &#123;<br>    <span class=\"hljs-type\">int</span> hash = <span class=\"hljs-number\">13</span>;<br>    hash = hash * <span class=\"hljs-number\">31</span> + (<span class=\"hljs-type\">name</span> != <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-type\">name</span>.hashCode() : <span class=\"hljs-number\">0</span>);<br>    hash = hash * <span class=\"hljs-number\">31</span> + (<span class=\"hljs-keyword\">location</span> != <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-keyword\">location</span>.hashCode() : <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">return</span> hash;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-HashMap和HashTable有哪些不同？\"><a href=\"#3-HashMap和HashTable有哪些不同？\" class=\"headerlink\" title=\"3. HashMap和HashTable有哪些不同？\"></a>3. HashMap和HashTable有哪些不同？</h2><ol>\n<li><p>初始容量：HashMap是16，HashTable是11。</p>\n</li>\n<li><p>HashTable是线程安全的，HashMap是线程不安全的。HashTable在读写方法前使用了synchronized同步锁HashMap就没有这些安全机制，多线程环境下使用是有问题的。</p>\n</li>\n<li><p>HashTable没有树化的操作，就仅仅是数组加链表。HashMap由于被到处引用，为了避免Hash冲突导致链表过长的问题，就引入了红黑树树化操作。</p>\n</li>\n</ol>\n<h3 id=\"3-1-为什么HashMap和HashTable容量规则不同？\"><a href=\"#3-1-为什么HashMap和HashTable容量规则不同？\" class=\"headerlink\" title=\"3.1 为什么HashMap和HashTable容量规则不同？\"></a>3.1 为什么HashMap和HashTable容量规则不同？</h3><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E8%BF%9D%E8%83%8C%E9%99%A4%E6%B3%95%E6%95%A3%E5%88%97%E6%B3%95%E8%A7%84%E5%88%99.png?raw=true\" alt=\"案例图-未树化\"><br>HashMap为了效率违背了算法导论的推荐，所以是有弊端的，HashMap为了弥补这个弊端，就重写了hash算法，加入了高位特征的扰动函数。使得h(k)结果足够分散。</p>\n<h3 id=\"3-2-HashMap红黑树可能出现的实际诱因？\"><a href=\"#3-2-HashMap红黑树可能出现的实际诱因？\" class=\"headerlink\" title=\"3.2 HashMap红黑树可能出现的实际诱因？\"></a>3.2 HashMap红黑树可能出现的实际诱因？</h3><p><strong>HashMap 1.7 导致的Tomcat的DoS问题</strong></p>\n<p>URL：<a href=\"http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E\">http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E</a></p>\n<p>上面链接的页面是来自Tomcat邮件组的讨论。Tomcat参数是用HashMap存储的，故如果参数有5W个，并且有心人构造了hash冲突比较严重的参数，此时链表的长度很长，查询参数就占用了CPU很多资源，就可能出现Dos问题（DoS时CPU100%）。</p>\n<h2 id=\"4-HashMap为什么链表超过8个结点会树化？\"><a href=\"#4-HashMap为什么链表超过8个结点会树化？\" class=\"headerlink\" title=\"4. HashMap为什么链表超过8个结点会树化？\"></a>4. HashMap为什么链表超过8个结点会树化？</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%B3%A8%E9%87%8A%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?raw=true\" alt=\"案例图-未树化\"></p>\n<p>上图是JDK1.8HashMap源码中提供的泊松分布的注释，泊松分布链表中出现8个元素的概率是极低的，所以出现红黑树概率很低。并且树化条件并不只是链表长度超过8，数组长度也要是64及以上才行。</p>\n","site":{"data":{}},"more":"<h1 id=\"一、数据结构\"><a href=\"#一、数据结构\" class=\"headerlink\" title=\"一、数据结构\"></a>一、数据结构</h1><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84JDK1.8.jpg?raw=true\" alt=\"案例图\"></p>\n<p>HashMap是java的util包中一个高效的查询容器，内部是类似哈希表的数据结构，哈希表以键值对为基础存储和查询数据，它的查询效率是O(1)。</p>\n<p><strong>数据结构</strong></p>\n<ul>\n<li>数组：基于数组下标随机访问，查询速度快。</li>\n<li>链表：通过链地址法解决Hash冲突。</li>\n<li>红黑树：使用红黑树logn(n指的是链上的数量)级别的查询效率，解决链表过长查询效率低的问题。</li>\n</ul>\n<h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2><p><strong>哈希表数组</strong></p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">transient <span class=\"hljs-keyword\">Node</span><span class=\"hljs-title\">&lt;K</span>,V&gt;[] table;<br></code></pre></td></tr></table></figure>\n<p><strong>描述</strong><br>HashMap实际存储键值数据的是名为talbe的字段，table是Node结点类型的数组。</p>\n<h2 id=\"2-链表\"><a href=\"#2-链表\" class=\"headerlink\" title=\"2. 链表\"></a>2. 链表</h2><p><strong>哈希表元素的数据结构</strong></p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span>&lt;<span class=\"hljs-title\">K</span>,<span class=\"hljs-title\">V</span>&gt; <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Map</span>.<span class=\"hljs-title\">Entry</span>&lt;<span class=\"hljs-title\">K</span>,<span class=\"hljs-title\">V</span>&gt; </span>&#123;<br>        <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span> hash;<br>        <span class=\"hljs-keyword\">final</span> K key;<br>        V value;<br>        Node&lt;K,V&gt; <span class=\"hljs-keyword\">next</span>;<br>        <span class=\"hljs-comment\">// ... ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>描述</strong><br>每一个结点都有一个hash、key、value和next，结点是构成单链表的基础数据结构。</p>\n<h2 id=\"3-红黑树\"><a href=\"#3-红黑树\" class=\"headerlink\" title=\"3. 红黑树\"></a>3. 红黑树</h2><p><strong>哈希表树结点的数据结构</strong></p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs scala\">static <span class=\"hljs-keyword\">final</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TreeNode&lt;K</span>,<span class=\"hljs-title\">V&gt;</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">LinkedHashMap</span>.<span class=\"hljs-title\">Entry&lt;K</span>,<span class=\"hljs-title\">V&gt;</span> </span>&#123;<br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; parent;  <span class=\"hljs-comment\">// red-black tree links</span><br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; left;<br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; right;<br>        <span class=\"hljs-type\">TreeNode</span>&lt;<span class=\"hljs-type\">K</span>,<span class=\"hljs-type\">V</span>&gt; prev;    <span class=\"hljs-comment\">// needed to unlink next upon deletion</span><br>        boolean red;<br>        <span class=\"hljs-comment\">// ... ...</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>描述</strong><br>HashMap在1.8之后引入了红黑树的概念，红黑树是二叉搜索树的一种，常规的二叉搜索树只需要满足结点的值大于做孩子的值小于右孩子的值即可。但是红黑树不仅仅是这样，红黑树需要满足以下的性质。</p>\n<h3 id=\"红黑树的性质\"><a href=\"#红黑树的性质\" class=\"headerlink\" title=\"红黑树的性质\"></a>红黑树的性质</h3><p>（来自算法导论第三版 p174）</p>\n<ol>\n<li>每个结点或是红色的，或是黑色的。</li>\n<li>根结点是黑色的。</li>\n<li>每个叶结点（NIL）是黑色的。</li>\n<li>如果一个结点是红色的，则它的两个子结点都是黑色的。</li>\n<li>对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点。</li>\n</ol>\n<h3 id=\"为什么使用红黑树？\"><a href=\"#为什么使用红黑树？\" class=\"headerlink\" title=\"为什么使用红黑树？\"></a>为什么使用红黑树？</h3><p><strong>二叉搜索树</strong><br>传统的二叉搜索树最坏的情况下树的高度等于结点的数目，以至于查询数据达到了O(n)。</p>\n<p><strong>AVL树</strong><br>平衡二叉树是一种平衡了树高的结构，使得任意一个结点的左右子树高差值不超过1。虽然AVL树可以弥补传统的二叉搜索树的缺点，但是它又引来了新的问题，当数据量大了的时候维护AVL树性质的自旋操作会很影响插入性能。</p>\n<p><strong>红黑树</strong><br>通过红黑节点性质来维护树的结构，通过节点的颜色变换，简单的旋转赋值提高红黑树的插入性能。</p>\n<p>红黑树的最长路径不会超过最短路径的两倍，此时全黑10 + 黑10红9，不会超过两倍。<strong>max &lt;= 2*min</strong></p>\n<p><strong>数据结构小结</strong><br>红黑树的是许多“平衡搜索树”中的一种，它是一种似平衡的状态，它可以保证在最坏的情况下基本动态集合的操作时间复杂度为O(logn)。</p>\n<h1 id=\"二、哈希寻址\"><a href=\"#二、哈希寻址\" class=\"headerlink\" title=\"二、哈希寻址\"></a>二、哈希寻址</h1><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80.jpg?raw=true\" alt=\"案例图\"></p>\n<p><strong>寻址流程</strong></p>\n<ol>\n<li>使用key执行<strong>hash算法</strong>，用key的hashCode方法返回值当作<strong>扰动函数</strong>的基础数据，并计算最终哈希值。</li>\n<li>根据返回的哈希值与表长减一的值进行<strong>与</strong>运算hash &amp; (n-1)，得到取模的结果。</li>\n<li>把取模的结果当作目标下标进行相应的操作。</li>\n</ol>\n<p><strong>备注</strong><br>表达式[hash &amp; (n-1)] 和 [hash % n] 在表长为2的幂次的情况下，得到的结果是一致的，都可以作为取模操作。</p>\n<h2 id=\"1-哈希算法\"><a href=\"#1-哈希算法\" class=\"headerlink\" title=\"1. 哈希算法\"></a>1. 哈希算法</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">int</span> hash(<span class=\"hljs-keyword\">Object</span> <span class=\"hljs-built_in\">key</span>) &#123;<br>    <span class=\"hljs-built_in\">int</span> h;<br>    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-built_in\">key</span> == <span class=\"hljs-keyword\">null</span>) ? <span class=\"hljs-number\">0</span> : (h = <span class=\"hljs-built_in\">key</span>.hashCode()) ^ (h &gt;&gt;&gt; <span class=\"hljs-number\">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>hash算法的目的是为了让不同的key哈希的结果更加离散，防止链表过长或红黑树过高。<br>上述HashMap的算法是基于键的hashCode返回值，参与到扰动函数的计算中，从而得到具体的哈希结果。这里需要注意当key为null的时候，返回的哈希值为0。</p>\n<h2 id=\"2-扰动函数\"><a href=\"#2-扰动函数\" class=\"headerlink\" title=\"2. 扰动函数\"></a>2. 扰动函数</h2><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E5%AF%BB%E5%9D%80%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0.jpg?raw=true\" alt=\"案例图\"></p>\n<p>所谓的扰动函数是指，为了使得key尽可能的分散，我们需要使用到key的更多特征，而不仅仅是用其哈希值直接进行取模运算。上述扰动函数使用key哈希值和key哈希值无符号右移16位的值进行异或运算，引入了高16位的特征，增大哈希值的离散性。</p>\n<h2 id=\"3-为什么异或更加分散？\"><a href=\"#3-为什么异或更加分散？\" class=\"headerlink\" title=\"3. 为什么异或更加分散？\"></a>3. 为什么异或更加分散？</h2><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%B0%E5%8A%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%BC%82%E6%88%96%E7%9A%84%E4%BB%B7%E5%80%BC.jpg?raw=true\" alt=\"案例图\"></p>\n<p>与操作和或操作对位上0和1的概率是不均衡的，而异或是均衡的。哈希值右移16位，正好是32位的一半，高16位和低16位异或，混合了原始哈希值的高低位的特征，以此来加大低位的随机性。</p>\n<h1 id=\"三、关键方法\"><a href=\"#三、关键方法\" class=\"headerlink\" title=\"三、关键方法\"></a>三、关键方法</h1><h2 id=\"1-保存结点\"><a href=\"#1-保存结点\" class=\"headerlink\" title=\"1. 保存结点\"></a>1. 保存结点</h2><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E7%9A%84%E4%BF%9D%E5%AD%98%E6%B5%81%E7%A8%8B.png?raw=true\" alt=\"案例图\"></p>\n<p><strong>put方法会先进行hash，然后调用putVal方法进行实际处理。</strong></p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">public V <span class=\"hljs-built_in\">put</span>(K <span class=\"hljs-built_in\">key</span>, V value) &#123;<br>    <span class=\"hljs-built_in\">return</span> putVal(hash(<span class=\"hljs-built_in\">key</span>), <span class=\"hljs-built_in\">key</span>, value, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>putVal描述</strong></p>\n<ol>\n<li>如果当前表为空或长度为0，重新构建一个默认容量的容器。</li>\n<li>如果哈希寻址到的下标的元素为空，创建一个Node放入。</li>\n<li>非以上情况<br>i. 如果当前key等于待插入元素的key，hash值也相同，替换原值。<br>ii. 如果当前结点是treeNode，使用红黑树的putTreeVal方法插入结点。<br>iii. 否则就遍历当前链表依次比较key和hash，如果相同替换原值，不同就继续遍历，直到下一个结点是空的就插入。 插入会判断当前是否是第八个结点，是的话且表长等于64，链表就树化。</li>\n<li>返回该key的原值，若没有则返回为空。</li>\n</ol>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">final V put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">hash</span>, K <span class=\"hljs-params\">key</span>, V <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">onlyIfAbsent</span>,<span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">evict</span>)</span> &#123;<br>        Node&lt;K,V&gt;<span class=\"hljs-literal\">[]</span> tab; Node&lt;K,V&gt; p; <span class=\"hljs-built_in\">int</span> n, i;<br>        <span class=\"hljs-keyword\">if</span> ((tab = table)<span class=\"hljs-operator\"> == </span>null<span class=\"hljs-operator\"> || </span>(n = tab.length)<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">0</span>)<br>            <span class=\"hljs-comment\">// 哈希表为空初始化</span><br>            n = (tab = resize<span class=\"hljs-literal\">()</span>).length;<br>        <span class=\"hljs-keyword\">if</span> ((p = tab<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span> = (<span class=\"hljs-identifier\">n</span> - <span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-identifier\">hash</span>]</span>)<span class=\"hljs-operator\"> == </span>null)<br>            <span class=\"hljs-comment\">// 索引位置为空，放入当前结点</span><br>            tab<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span> = <span class=\"hljs-keyword\">new</span><span class=\"hljs-constructor\">Node(<span class=\"hljs-params\">hash</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">null</span>)</span>;<br>        <span class=\"hljs-keyword\">else</span> &#123;<br>            Node&lt;K,V&gt; e; K k;<br>            <span class=\"hljs-keyword\">if</span> (p.hash<span class=\"hljs-operator\"> == </span>hash<span class=\"hljs-operator\"> &amp;&amp;</span><br><span class=\"hljs-operator\">                </span>((k = p.key)<span class=\"hljs-operator\"> == </span>key<span class=\"hljs-operator\"> || </span>(key != null<span class=\"hljs-operator\"> &amp;&amp; </span>key.equals(k))))<br>                <span class=\"hljs-comment\">// 键相同值替换，后面判断替换值</span><br>                e = p;<br>            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (p instanceof TreeNode)<br>                <span class=\"hljs-comment\">// 树结点，使用红黑树的插入方法</span><br>                e = ((TreeNode&lt;K,V&gt;)p).put<span class=\"hljs-constructor\">TreeVal(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">tab</span>, <span class=\"hljs-params\">hash</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>)</span>;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">// 遍历链表</span><br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> binCount = <span class=\"hljs-number\">0</span>; ; ++binCount) &#123;<br>                    <span class=\"hljs-keyword\">if</span> ((e = p.next)<span class=\"hljs-operator\"> == </span>null) &#123;<br>                        p.next = <span class=\"hljs-keyword\">new</span><span class=\"hljs-constructor\">Node(<span class=\"hljs-params\">hash</span>, <span class=\"hljs-params\">key</span>, <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">null</span>)</span>;<br>                        <span class=\"hljs-keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// -1 for 1st</span><br>                            treeify<span class=\"hljs-constructor\">Bin(<span class=\"hljs-params\">tab</span>, <span class=\"hljs-params\">hash</span>)</span>;<br>                        break;<br>                    &#125;<br>                    <span class=\"hljs-comment\">// 相同的键则跳出循环，判断替换原值</span><br>                    <span class=\"hljs-keyword\">if</span> (e.hash<span class=\"hljs-operator\"> == </span>hash<span class=\"hljs-operator\"> &amp;&amp;</span><br><span class=\"hljs-operator\">                        </span>((k = e.key)<span class=\"hljs-operator\"> == </span>key<span class=\"hljs-operator\"> || </span>(key != null<span class=\"hljs-operator\"> &amp;&amp; </span>key.equals(k))))<br>                        break;<br>                    p = e;<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-comment\">// 替换原值</span><br>            <span class=\"hljs-keyword\">if</span> (e != null) &#123; <span class=\"hljs-comment\">// existing mapping for key</span><br>                V oldValue = e.value;<br>                <span class=\"hljs-keyword\">if</span> (!onlyIfAbsent<span class=\"hljs-operator\"> || </span>oldValue<span class=\"hljs-operator\"> == </span>null)<br>                    e.value = value;<br>                after<span class=\"hljs-constructor\">NodeAccess(<span class=\"hljs-params\">e</span>)</span>;<br>                return oldValue;<br>            &#125;<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"2-查询结点\"><a href=\"#2-查询结点\" class=\"headerlink\" title=\"2. 查询结点\"></a>2. 查询结点</h2><p><strong>get方法会先hash然后getNode寻找值</strong></p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">public</span> V <span class=\"hljs-built_in\">get</span>(<span class=\"hljs-keyword\">Object</span> <span class=\"hljs-built_in\">key</span>) &#123;<br>    Node&lt;K,V&gt; e;<br>    <span class=\"hljs-keyword\">return</span> (e = getNode(hash(<span class=\"hljs-built_in\">key</span>), <span class=\"hljs-built_in\">key</span>)) == <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-keyword\">null</span> : e.value;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>getNode描述</strong></p>\n<ol>\n<li>根据hash与运算求得数组下标位置，并判断是否有值。</li>\n<li>有值的话，则判断查询的key，是否等于first结点的key，等于则返回。</li>\n<li>头结点不等于的话，判断是否是红黑树的结点，是红黑树的结点就走红黑树的查询逻辑。</li>\n<li>不是红黑树的结点就遍历单链表查询。</li>\n</ol>\n<figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs q\">final Node&lt;K,V&gt; getNode(<span class=\"hljs-type\">int</span> hash, Object <span class=\"hljs-built_in\">key</span>) &#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; <span class=\"hljs-built_in\">first</span>, e; <span class=\"hljs-type\">int</span> n; K k;<br>    if ((tab = table) != <span class=\"hljs-built_in\">null</span> &amp;&amp; (n = tab.length) &gt; <span class=\"hljs-number\">0</span> &amp;&amp;<br>        <br>        <span class=\"hljs-comment\">// 找hash值对应到数组中的元素下标，判断下标位置是否为空</span><br>        (<span class=\"hljs-built_in\">first</span> = tab[(n - <span class=\"hljs-number\">1</span>) &amp; hash]) != <span class=\"hljs-built_in\">null</span>) &#123;<br>        <br>        <span class=\"hljs-comment\">// 判断头结点</span><br>        if (<span class=\"hljs-built_in\">first</span>.hash == hash &amp;&amp; <br>            ((k = <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">key</span>) == <span class=\"hljs-built_in\">key</span> || (<span class=\"hljs-built_in\">key</span> != <span class=\"hljs-built_in\">null</span> &amp;&amp; <span class=\"hljs-built_in\">key</span>.equals(k))))<br>            return <span class=\"hljs-built_in\">first</span>;<br>        if ((e = <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">next</span>) != <span class=\"hljs-built_in\">null</span>) &#123;<br>        <br>        <span class=\"hljs-comment\">// 判断是否是树结点</span><br>            if (<span class=\"hljs-built_in\">first</span> instanceof TreeNode)<br>                return ((TreeNode&lt;K,V&gt;)<span class=\"hljs-built_in\">first</span>).getTreeNode(hash, <span class=\"hljs-built_in\">key</span>);<br>                <br>            <span class=\"hljs-comment\">// 遍历单链表</span><br>            <span class=\"hljs-keyword\">do</span> &#123;<br>                if (e.hash == hash &amp;&amp;<br>                    ((k = e.<span class=\"hljs-built_in\">key</span>) == <span class=\"hljs-built_in\">key</span> || (<span class=\"hljs-built_in\">key</span> != <span class=\"hljs-built_in\">null</span> &amp;&amp; <span class=\"hljs-built_in\">key</span>.equals(k))))<br>                    return e;<br>            &#125; <span class=\"hljs-keyword\">while</span> ((e = e.<span class=\"hljs-built_in\">next</span>) != <span class=\"hljs-built_in\">null</span>);<br>        &#125;<br>    &#125;<br>    return <span class=\"hljs-built_in\">null</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-哈希表扩容\"><a href=\"#3-哈希表扩容\" class=\"headerlink\" title=\"3. 哈希表扩容\"></a>3. 哈希表扩容</h2><p>HashMap 的扩容在 put 操作中会触发扩容，主要是这个方法:</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs haxe\">final Node&lt;K,V&gt;[] resize() &#123;<br>        Node&lt;K,V&gt;[] oldTab = table;<br>        <span class=\"hljs-comment\">// ... ...</span><br> \t\t<span class=\"hljs-comment\">// 定义新哈希表</span><br>        Node&lt;K,V&gt;[] <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span> = (Node&lt;K,V&gt;[])<span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">Node</span>[<span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Cap</span>];<br>        table = <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span>;<br>        <span class=\"hljs-keyword\">if</span> (oldTab != <span class=\"hljs-literal\">null</span>) &#123;<br>        \t<span class=\"hljs-comment\">// 老哈希表内容复制到新的哈希表</span><br>            <span class=\"hljs-keyword\">for</span> (int j = <span class=\"hljs-number\">0</span>; j &lt; oldCap; ++j) &#123;<br>                <span class=\"hljs-keyword\">if</span> ((e = oldTab[j]) != <span class=\"hljs-literal\">null</span>) &#123;<br>                        <span class=\"hljs-comment\">// ... ...</span><br>                    <span class=\"hljs-keyword\">else</span> &#123;<br>                    \t<span class=\"hljs-comment\">// 当前链表拆成两个链表，原位置表loHead，新位置表hiHead。</span><br>                        Node&lt;K,V&gt; loHead = <span class=\"hljs-literal\">null</span>, loTail = <span class=\"hljs-literal\">null</span>;<br>                        Node&lt;K,V&gt; hiHead = <span class=\"hljs-literal\">null</span>, hiTail = <span class=\"hljs-literal\">null</span>;<br>                        Node&lt;K,V&gt; next;<br>                        <span class=\"hljs-keyword\">do</span> &#123;<br>                            next = e.next;<br>                            <span class=\"hljs-keyword\">if</span> ((e.hash &amp; oldCap) == <span class=\"hljs-number\">0</span>) &#123;<br>                                <span class=\"hljs-keyword\">if</span> (loTail == <span class=\"hljs-literal\">null</span>)<br>                                    loHead = e;<br>                                <span class=\"hljs-keyword\">else</span><br>                                    loTail.next = e;<br>                                loTail = e;<br>                            &#125;<br>                            <span class=\"hljs-keyword\">else</span> &#123;<br>                                <span class=\"hljs-keyword\">if</span> (hiTail == <span class=\"hljs-literal\">null</span>)<br>                                    hiHead = e;<br>                                <span class=\"hljs-keyword\">else</span><br>                                    hiTail.next = e;<br>                                hiTail = e;<br>                            &#125;<br>                        &#125; <span class=\"hljs-keyword\">while</span> ((e = next) != <span class=\"hljs-literal\">null</span>);<br>                        <span class=\"hljs-comment\">// 原位置表lohead设置到新表的原位置上。</span><br>                        <span class=\"hljs-keyword\">if</span> (loTail != <span class=\"hljs-literal\">null</span>) &#123;<br>                            loTail.next = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span>[j] = loHead;<br>                        &#125;<br>                        <span class=\"hljs-comment\">// 新位置表hihead设置到新表的原位置+原表长的位置上。</span><br>                        <span class=\"hljs-keyword\">if</span> (hiTail != <span class=\"hljs-literal\">null</span>) &#123;<br>                            hiTail.next = <span class=\"hljs-literal\">null</span>;<br>                            <span class=\"hljs-keyword\">new</span><span class=\"hljs-type\">Tab</span>[j + oldCap] = hiHead;<br>                        &#125;<br>                    &#125;<br>\t\t<span class=\"hljs-comment\">// ... ...</span><br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>HashMap一次扩容的过程:<br>1、取当前table的2倍作为新table的大小。<br>2、根据算出的新table的大小new出一个新的Entry数组来，名为newTab。<br>3、HashMap中的table指向newTable。<br>3、轮询原table的每一个位置，将每个位置上连接的Entry，算出在新table上的位置，并以链表形式连接。原table上的所有Entry全部轮询完毕之后，意味着原table上面的所有Entry已经移到了新的table上。</p>\n<h3 id=\"扩容案例\"><a href=\"#扩容案例\" class=\"headerlink\" title=\"扩容案例\"></a>扩容案例</h3><p>扩容前：</p>\n<p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%89%8D.jpg?raw=true\" alt=\"案例图\"></p>\n<p>扩容后：<br><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E5%93%88%E5%B8%8C%E8%A1%A8%E6%89%A9%E5%AE%B9%E5%90%8E.jpg?raw=true\" alt=\"案例图\"></p>\n<h3 id=\"扩容后数组的定位\"><a href=\"#扩容后数组的定位\" class=\"headerlink\" title=\"扩容后数组的定位\"></a>扩容后数组的定位</h3><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%89%A9%E5%AE%B9%E5%89%8D%E5%90%8E%E4%BD%8D%E7%BD%AE%E8%A7%84%E5%88%99.png?raw=true\" alt=\"案例图\"></p>\n<p>如图可知，扩容前的Hash值[A - F]都在同一个链表上，扩容后则链表就会拆开[ABC]在4位置，[DEF]在20位置。扩容后原来的链表元素仅可能出现在两个位置，如果链表元素原来在 x 位置上，那么扩容后的两个点位就是 x 和 x + 16的位置上。</p>\n<p>故上图原来都在一个链表上，那么扩容就是4和20两个位置。</p>\n<h2 id=\"4-put和putIfAbsent区别\"><a href=\"#4-put和putIfAbsent区别\" class=\"headerlink\" title=\"4. put和putIfAbsent区别\"></a>4. put和putIfAbsent区别</h2><p><strong>put方法onlyIfAbsent传的是false</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public V put(K key, V value) &#123;<br>    return put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">hash</span>(<span class=\"hljs-params\">key</span>)</span>, key, value, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-literal\">true</span>);<br>&#125;<br><br>final V put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">int</span> <span class=\"hljs-params\">hash</span>, K <span class=\"hljs-params\">key</span>, V <span class=\"hljs-params\">value</span>, <span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">onlyIfAbsent</span>,<span class=\"hljs-params\">boolean</span> <span class=\"hljs-params\">evict</span>)</span><br><br></code></pre></td></tr></table></figure>\n<p><strong>putIfAbsent方法onlyIfAbsent传的是true</strong></p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">public V put<span class=\"hljs-constructor\">IfAbsent(K <span class=\"hljs-params\">key</span>, V <span class=\"hljs-params\">value</span>)</span> &#123;<br>    return put<span class=\"hljs-constructor\">Val(<span class=\"hljs-params\">hash</span>(<span class=\"hljs-params\">key</span>)</span>, key, value, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>putVal的onlyIfAbsent参数是干嘛的</strong></p>\n<figure class=\"highlight stan\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stan\"><span class=\"hljs-comment\">// 键相同替换原值的逻辑</span><br><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">e</span> != null) &#123; <span class=\"hljs-comment\">// existing mapping for key</span><br>    V oldValue = <span class=\"hljs-built_in\">e</span>.value;<br>    <span class=\"hljs-comment\">// 如果onlyIfAbsent是false则是替换原值的</span><br>    <span class=\"hljs-comment\">// onlyIfAbsent是true则是不会替换原值的</span><br>    <span class=\"hljs-keyword\">if</span> (!onlyIfAbsent || oldValue == null)<br>        <span class=\"hljs-built_in\">e</span>.value = value;<br>    afterNodeAccess(<span class=\"hljs-built_in\">e</span>);<br>    <span class=\"hljs-keyword\">return</span> oldValue;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"putIfAbsent小结\"><a href=\"#putIfAbsent小结\" class=\"headerlink\" title=\"putIfAbsent小结\"></a>putIfAbsent小结</h3><p>onlyIfAbsent参数为false，则新值会替换原值并且返回原值。<br>onlyIfAbsent参数为true，则原值不变并且返回原值。</p>\n<h1 id=\"四、其他\"><a href=\"#四、其他\" class=\"headerlink\" title=\"四、其他\"></a>四、其他</h1><h2 id=\"1-澄清HashMap链表的树化条件\"><a href=\"#1-澄清HashMap链表的树化条件\" class=\"headerlink\" title=\"1. 澄清HashMap链表的树化条件\"></a>1. 澄清HashMap链表的树化条件</h2><h3 id=\"条件1-链表已有8个节点，第9个节点插入链表时树化。\"><a href=\"#条件1-链表已有8个节点，第9个节点插入链表时树化。\" class=\"headerlink\" title=\"条件1:链表已有8个节点，第9个节点插入链表时树化。\"></a>条件1:链表已有8个节点，第9个节点插入链表时树化。</h3><h4 id=\"8个节点，未树化。\"><a href=\"#8个节点，未树化。\" class=\"headerlink\" title=\"8个节点，未树化。\"></a>8个节点，未树化。</h4><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E9%93%BE8%E6%9C%AA%E6%A0%91%E5%8C%96.jpg?raw=true\" alt=\"案例图-未树化\"></p>\n<h4 id=\"9个节点，树化。\"><a href=\"#9个节点，树化。\" class=\"headerlink\" title=\"9个节点，树化。\"></a>9个节点，树化。</h4><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E9%95%BF64%E5%8D%95%E4%BD%8D%E7%BD%AE%E7%AC%AC9%E4%B8%AA%E7%BB%93%E7%82%B9%E6%A0%91%E5%8C%96.jpg?raw=true\" alt=\"案例图-树化\"></p>\n<h4 id=\"插入结点源码解析\"><a href=\"#插入结点源码解析\" class=\"headerlink\" title=\"插入结点源码解析\"></a>插入结点源码解析</h4><p>当前count值要大于等于 TREEIFY_THRESHOLD(8) - 1，计数器从0开始计数，到7刚好是8个结点。遍历时从第2个节点开始，故当前待插入节点是8 + 1，第九个节点进行树化。</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs processing\"><span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">// 遍历单链表，判断相同，直到找到空值</span><br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">int</span> binCount = <span class=\"hljs-number\">0</span>; ; ++binCount) &#123;<br>    <span class=\"hljs-comment\">// 重点这里e是第2个节点。</span><br>        <span class=\"hljs-keyword\">if</span> ((e = p.next) == <span class=\"hljs-keyword\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 待插入结点已插入</span><br>            p.next = newNode(hash, <span class=\"hljs-built_in\">key</span>, value, <span class=\"hljs-keyword\">null</span>);<br>            <span class=\"hljs-comment\">// 树化条件1: 当前count值大于等于 8 - 1，当前待插入结点如果是第九个结点（[0-7]为8个，从第二个节点开始故加1，所以待插入是第九个节点）就树化。</span><br>            <span class=\"hljs-keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"hljs-number\">1</span>)<br>                treeifyBin(tab, hash);<br>            <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (e.hash == hash &amp;&amp;<br>            ((k = e.<span class=\"hljs-built_in\">key</span>) == <span class=\"hljs-built_in\">key</span> || (<span class=\"hljs-built_in\">key</span> != <span class=\"hljs-keyword\">null</span> &amp;&amp; <span class=\"hljs-built_in\">key</span>.equals(k))))<br>            <span class=\"hljs-keyword\">break</span>;<br>        p = e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"条件2-表的长度大于或等于64\"><a href=\"#条件2-表的长度大于或等于64\" class=\"headerlink\" title=\"条件2:表的长度大于或等于64\"></a>条件2:表的长度大于或等于64</h3><h4 id=\"树化方法源码解析\"><a href=\"#树化方法源码解析\" class=\"headerlink\" title=\"树化方法源码解析\"></a>树化方法源码解析</h4><p><strong>treeifyBin(tab, hash)方法</strong><br>表的长度小于MIN_TREEIFY_CAPACITY(64)，就不进行树化操作，resize扩容即可。反之，表的长度大于或等于64，才可以进行链表树化的操作。</p>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\"><span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> treeifyBin(Node&lt;K,V&gt;[] tab, <span class=\"hljs-built_in\">int</span> hash) &#123;<br>    <span class=\"hljs-built_in\">int</span> n, <span class=\"hljs-keyword\">index</span>; Node&lt;K,V&gt; e;<br>    <span class=\"hljs-comment\">// 表长度小于 MIN_TREEIFY_CAPACITY 64，此时扩容即可不需要进行树化操作。</span><br>    <span class=\"hljs-keyword\">if</span> (tab == <span class=\"hljs-literal\">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)<br>        resize();<br>    <br>    <span class=\"hljs-comment\">// 表长大于等于64，才需要进行树化操作</span><br>    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> ((e = tab[<span class=\"hljs-keyword\">index</span> = (n - <span class=\"hljs-number\">1</span>) &amp; hash]) != <span class=\"hljs-literal\">null</span>) &#123;<br>        TreeNode&lt;K,V&gt; hd = <span class=\"hljs-literal\">null</span>, tl = <span class=\"hljs-literal\">null</span>;<br>        <span class=\"hljs-keyword\">do</span> &#123;<br>            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class=\"hljs-literal\">null</span>);<br>            <span class=\"hljs-keyword\">if</span> (tl == <span class=\"hljs-literal\">null</span>)<br>                hd = p;<br>            <span class=\"hljs-keyword\">else</span> &#123;<br>                p.prev = tl;<br>                tl.<span class=\"hljs-keyword\">next</span> = p;<br>            &#125;<br>            tl = p;<br>        &#125; <span class=\"hljs-keyword\">while</span> ((e = e.<span class=\"hljs-keyword\">next</span>) != <span class=\"hljs-literal\">null</span>);<br>        <span class=\"hljs-keyword\">if</span> ((tab[<span class=\"hljs-keyword\">index</span>] = hd) != <span class=\"hljs-literal\">null</span>)<br>            hd.treeify(tab);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\"><a href=\"#2-自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\" class=\"headerlink\" title=\"2.自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？\"></a>2.自定义类型作为HashMap的键，为什么要重写hashCode和equals方法？</h2><p>equals方法是比较两个对象是否相同的方法，Object基础实现是比较hashCode，也就是对象的地址。<br>我们自定义类型如果想当作HashMap的键是需要重写equals方法的，否则两个对象的属性值相同，但是却不是同一个对象，地址不相同导致最终结果不相等。如果作为键的对象没有重写equals，这肯定是有问题的。</p>\n<p>hashCode方法，是唯一标识一个对象的方法，Object默认实现时返回对象的地址。<br><strong>HashCode重写时需要注意以下几点：</strong></p>\n<ol>\n<li>hashCode方法中不能包含equals方法中没有的字段。</li>\n<li>String和其它包装类型已有的hashCode可以直接调用。</li>\n<li>hash = 31 * hash + (field != null ? field.hashCode : 0)；可以应用于hashCode方法当中。因为任何数 n * 31都可以被JVM优化为 (n&lt;&lt;5)-n 这个表达式，移位和减法要比其它的操作快速的多。</li>\n</ol>\n<p><strong>《Effective Java》中提出了一种简单通用的hashCode算法：</strong></p>\n<ol>\n<li>初始化一个整型的变量，并为此变量富裕一个非零的常数值，如 int code = 13;</li>\n<li>如果对象中有String或其它包装类型，则递归调用该属性的hashCode，如果属性为空则处理为0。</li>\n</ol>\n<p><strong>案例</strong></p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">@Override<br><span class=\"hljs-built_in\">public</span> <span class=\"hljs-type\">int</span> hashCode() &#123;<br>    <span class=\"hljs-type\">int</span> hash = <span class=\"hljs-number\">13</span>;<br>    hash = hash * <span class=\"hljs-number\">31</span> + (<span class=\"hljs-type\">name</span> != <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-type\">name</span>.hashCode() : <span class=\"hljs-number\">0</span>);<br>    hash = hash * <span class=\"hljs-number\">31</span> + (<span class=\"hljs-keyword\">location</span> != <span class=\"hljs-keyword\">null</span> ? <span class=\"hljs-keyword\">location</span>.hashCode() : <span class=\"hljs-number\">0</span>);<br>    <span class=\"hljs-keyword\">return</span> hash;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-HashMap和HashTable有哪些不同？\"><a href=\"#3-HashMap和HashTable有哪些不同？\" class=\"headerlink\" title=\"3. HashMap和HashTable有哪些不同？\"></a>3. HashMap和HashTable有哪些不同？</h2><ol>\n<li><p>初始容量：HashMap是16，HashTable是11。</p>\n</li>\n<li><p>HashTable是线程安全的，HashMap是线程不安全的。HashTable在读写方法前使用了synchronized同步锁HashMap就没有这些安全机制，多线程环境下使用是有问题的。</p>\n</li>\n<li><p>HashTable没有树化的操作，就仅仅是数组加链表。HashMap由于被到处引用，为了避免Hash冲突导致链表过长的问题，就引入了红黑树树化操作。</p>\n</li>\n</ol>\n<h3 id=\"3-1-为什么HashMap和HashTable容量规则不同？\"><a href=\"#3-1-为什么HashMap和HashTable容量规则不同？\" class=\"headerlink\" title=\"3.1 为什么HashMap和HashTable容量规则不同？\"></a>3.1 为什么HashMap和HashTable容量规则不同？</h3><p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E8%BF%9D%E8%83%8C%E9%99%A4%E6%B3%95%E6%95%A3%E5%88%97%E6%B3%95%E8%A7%84%E5%88%99.png?raw=true\" alt=\"案例图-未树化\"><br>HashMap为了效率违背了算法导论的推荐，所以是有弊端的，HashMap为了弥补这个弊端，就重写了hash算法，加入了高位特征的扰动函数。使得h(k)结果足够分散。</p>\n<h3 id=\"3-2-HashMap红黑树可能出现的实际诱因？\"><a href=\"#3-2-HashMap红黑树可能出现的实际诱因？\" class=\"headerlink\" title=\"3.2 HashMap红黑树可能出现的实际诱因？\"></a>3.2 HashMap红黑树可能出现的实际诱因？</h3><p><strong>HashMap 1.7 导致的Tomcat的DoS问题</strong></p>\n<p>URL：<a href=\"http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E\">http://mail-archives.apache.org/mod_mbox/www-announce/201112.mbox/%3C4EFB9800.5010106@apache.org%3E</a></p>\n<p>上面链接的页面是来自Tomcat邮件组的讨论。Tomcat参数是用HashMap存储的，故如果参数有5W个，并且有心人构造了hash冲突比较严重的参数，此时链表的长度很长，查询参数就占用了CPU很多资源，就可能出现Dos问题（DoS时CPU100%）。</p>\n<h2 id=\"4-HashMap为什么链表超过8个结点会树化？\"><a href=\"#4-HashMap为什么链表超过8个结点会树化？\" class=\"headerlink\" title=\"4. HashMap为什么链表超过8个结点会树化？\"></a>4. HashMap为什么链表超过8个结点会树化？</h2><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">int</span> TREEIFY_THRESHOLD = <span class=\"hljs-number\">8</span>;<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"https://github.com/muzi-code/image-collection/blob/main/java/juc/hashmap/HashMap%E6%B3%A8%E9%87%8A%E6%B3%8A%E6%9D%BE%E5%88%86%E5%B8%83.png?raw=true\" alt=\"案例图-未树化\"></p>\n<p>上图是JDK1.8HashMap源码中提供的泊松分布的注释，泊松分布链表中出现8个元素的概率是极低的，所以出现红黑树概率很低。并且树化条件并不只是链表长度超过8，数组长度也要是64及以上才行。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckt7cmj6b00010cw0fwtb1fdv","category_id":"ckt7cmj6f00020cw048daagvc","_id":"ckt7cmj6h00050cw0fkht4d73"}],"PostTag":[{"post_id":"ckt7cmj6b00010cw0fwtb1fdv","tag_id":"ckt7cmj6g00030cw08yque010","_id":"ckt7cmj6h00070cw0e2c61c3l"},{"post_id":"ckt7cmj6b00010cw0fwtb1fdv","tag_id":"ckt7cmj6g00040cw0f0zcc0w1","_id":"ckt7cmj6h00080cw00vrq8jcl"},{"post_id":"ckt7cmj6b00010cw0fwtb1fdv","tag_id":"ckt7cmj6h00060cw0hmqbhsxu","_id":"ckt7cmj6h00090cw06lih3whh"}],"Tag":[{"name":"容器","_id":"ckt7cmj6g00030cw08yque010"},{"name":"HashMap","_id":"ckt7cmj6g00040cw0f0zcc0w1"},{"name":"JUC","_id":"ckt7cmj6h00060cw0hmqbhsxu"}]}}